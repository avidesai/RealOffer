/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AssistantFileModel, Chat, ChatCompletionModel, ChatModel, ContextModel, ContextRequest, ListFiles200Response, SearchCompletions } from '../models/index';
export interface ChatAssistantRequest {
    assistantName: string;
    chat: Chat;
}
export interface ChatCompletionAssistantRequest {
    assistantName: string;
    searchCompletions: SearchCompletions;
}
export interface ContextAssistantRequest {
    assistantName: string;
    contextRequest: ContextRequest;
}
export interface DeleteFileRequest {
    assistantName: string;
    assistantFileId: string;
}
export interface DescribeFileRequest {
    assistantName: string;
    assistantFileId: string;
    includeUrl?: DescribeFileIncludeUrlEnum;
}
export interface ListFilesRequest {
    assistantName: string;
    filter?: string;
}
export interface UploadFileRequest {
    assistantName: string;
    file: Blob;
    metadata?: string;
}
/**
 *
 */
export declare class ManageAssistantsApi extends runtime.BaseAPI {
    /**
     * Chat with an assistant and get back citations in structured form.   This is the recommended way to chat with an assistant, as it offers more functionality and control over the assistant\'s responses and references than the OpenAI-compatible chat interface.  For guidance and examples, see [Chat with an assistant](https://docs.pinecone.io/guides/assistant/chat-with-assistant).
     * Chat with an assistant
     */
    chatAssistantRaw(requestParameters: ChatAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatModel>>;
    /**
     * Chat with an assistant and get back citations in structured form.   This is the recommended way to chat with an assistant, as it offers more functionality and control over the assistant\'s responses and references than the OpenAI-compatible chat interface.  For guidance and examples, see [Chat with an assistant](https://docs.pinecone.io/guides/assistant/chat-with-assistant).
     * Chat with an assistant
     */
    chatAssistant(requestParameters: ChatAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatModel>;
    /**
     * Chat with an assistant. This endpoint is based on the OpenAI Chat Completion API, a commonly used and adopted API.   It is useful if you need inline citations or OpenAI-compatible responses, but has limited functionality compared to the standard chat interface.  For guidance and examples, see [Chat with an assistant](https://docs.pinecone.io/guides/assistant/chat-with-assistant).
     * Chat through an OpenAI-compatible interface
     */
    chatCompletionAssistantRaw(requestParameters: ChatCompletionAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatCompletionModel>>;
    /**
     * Chat with an assistant. This endpoint is based on the OpenAI Chat Completion API, a commonly used and adopted API.   It is useful if you need inline citations or OpenAI-compatible responses, but has limited functionality compared to the standard chat interface.  For guidance and examples, see [Chat with an assistant](https://docs.pinecone.io/guides/assistant/chat-with-assistant).
     * Chat through an OpenAI-compatible interface
     */
    chatCompletionAssistant(requestParameters: ChatCompletionAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatCompletionModel>;
    /**
     * Retrieve context snippets from an assistant to use as part of RAG or any agentic flow.  For guidance and examples, see [Retrieve context snippets](https://docs.pinecone.io/guides/assistant/retrieve-context-snippets).
     * Retrieve context from an assistant
     */
    contextAssistantRaw(requestParameters: ContextAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextModel>>;
    /**
     * Retrieve context snippets from an assistant to use as part of RAG or any agentic flow.  For guidance and examples, see [Retrieve context snippets](https://docs.pinecone.io/guides/assistant/retrieve-context-snippets).
     * Retrieve context from an assistant
     */
    contextAssistant(requestParameters: ContextAssistantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextModel>;
    /**
     * Delete an uploaded file from an assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#delete-a-file).
     * Delete an uploaded file
     */
    deleteFileRaw(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an uploaded file from an assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#delete-a-file).
     * Delete an uploaded file
     */
    deleteFile(requestParameters: DeleteFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get the status and metadata of a file uploaded to an assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#get-the-status-of-a-file).
     * Describe a file upload
     */
    describeFileRaw(requestParameters: DescribeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssistantFileModel>>;
    /**
     * Get the status and metadata of a file uploaded to an assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#get-the-status-of-a-file).
     * Describe a file upload
     */
    describeFile(requestParameters: DescribeFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssistantFileModel>;
    /**
     * List all files in an assistant, with an option to filter files with metadata.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#list-files-in-an-assistant).
     * List Files
     */
    listFilesRaw(requestParameters: ListFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListFiles200Response>>;
    /**
     * List all files in an assistant, with an option to filter files with metadata.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#list-files-in-an-assistant).
     * List Files
     */
    listFiles(requestParameters: ListFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListFiles200Response>;
    /**
     * Upload a file to the specified assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#upload-a-local-file).
     * Upload file to assistant
     */
    uploadFileRaw(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssistantFileModel>>;
    /**
     * Upload a file to the specified assistant.  For guidance and examples, see [Manage files](https://docs.pinecone.io/guides/assistant/manage-files#upload-a-local-file).
     * Upload file to assistant
     */
    uploadFile(requestParameters: UploadFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssistantFileModel>;
}
/**
 * @export
 */
export declare const DescribeFileIncludeUrlEnum: {
    readonly True: "true";
    readonly False: "false";
};
export type DescribeFileIncludeUrlEnum = typeof DescribeFileIncludeUrlEnum[keyof typeof DescribeFileIncludeUrlEnum];
