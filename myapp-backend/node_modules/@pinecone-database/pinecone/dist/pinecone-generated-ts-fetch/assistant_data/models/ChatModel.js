"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatModelToJSON = exports.ChatModelFromJSONTyped = exports.ChatModelFromJSON = exports.instanceOfChatModel = exports.ChatModelFinishReasonEnum = void 0;
const runtime_1 = require("../runtime");
const CitationModel_1 = require("./CitationModel");
const MessageModel_1 = require("./MessageModel");
const UsageModel_1 = require("./UsageModel");
/**
 * @export
 */
exports.ChatModelFinishReasonEnum = {
    Stop: 'stop',
    Length: 'length',
    ContentFilter: 'content_filter',
    FunctionCall: 'function_call'
};
/**
 * Check if a given object implements the ChatModel interface.
 */
function instanceOfChatModel(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfChatModel = instanceOfChatModel;
function ChatModelFromJSON(json) {
    return ChatModelFromJSONTyped(json, false);
}
exports.ChatModelFromJSON = ChatModelFromJSON;
function ChatModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': !(0, runtime_1.exists)(json, 'id') ? undefined : json['id'],
        'finishReason': !(0, runtime_1.exists)(json, 'finish_reason') ? undefined : json['finish_reason'],
        'message': !(0, runtime_1.exists)(json, 'message') ? undefined : (0, MessageModel_1.MessageModelFromJSON)(json['message']),
        'model': !(0, runtime_1.exists)(json, 'model') ? undefined : json['model'],
        'citations': !(0, runtime_1.exists)(json, 'citations') ? undefined : (json['citations'].map(CitationModel_1.CitationModelFromJSON)),
        'usage': !(0, runtime_1.exists)(json, 'usage') ? undefined : (0, UsageModel_1.UsageModelFromJSON)(json['usage']),
    };
}
exports.ChatModelFromJSONTyped = ChatModelFromJSONTyped;
function ChatModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'finish_reason': value.finishReason,
        'message': (0, MessageModel_1.MessageModelToJSON)(value.message),
        'model': value.model,
        'citations': value.citations === undefined ? undefined : (value.citations.map(CitationModel_1.CitationModelToJSON)),
        'usage': (0, UsageModel_1.UsageModelToJSON)(value.usage),
    };
}
exports.ChatModelToJSON = ChatModelToJSON;
//# sourceMappingURL=ChatModel.js.map