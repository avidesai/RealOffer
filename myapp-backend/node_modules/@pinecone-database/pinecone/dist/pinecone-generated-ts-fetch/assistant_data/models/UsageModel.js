"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Assistant Data Plane API
 * Pinecone Assistant Engine is a context engine to store and retrieve relevant knowledge from millions of documents at scale. This API supports interactions with assistants.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageModelToJSON = exports.UsageModelFromJSONTyped = exports.UsageModelFromJSON = exports.instanceOfUsageModel = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the UsageModel interface.
 */
function instanceOfUsageModel(value) {
    let isInstance = true;
    return isInstance;
}
exports.instanceOfUsageModel = instanceOfUsageModel;
function UsageModelFromJSON(json) {
    return UsageModelFromJSONTyped(json, false);
}
exports.UsageModelFromJSON = UsageModelFromJSON;
function UsageModelFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'promptTokens': !(0, runtime_1.exists)(json, 'prompt_tokens') ? undefined : json['prompt_tokens'],
        'completionTokens': !(0, runtime_1.exists)(json, 'completion_tokens') ? undefined : json['completion_tokens'],
        'totalTokens': !(0, runtime_1.exists)(json, 'total_tokens') ? undefined : json['total_tokens'],
    };
}
exports.UsageModelFromJSONTyped = UsageModelFromJSONTyped;
function UsageModelToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'prompt_tokens': value.promptTokens,
        'completion_tokens': value.completionTokens,
        'total_tokens': value.totalTokens,
    };
}
exports.UsageModelToJSON = UsageModelToJSON;
//# sourceMappingURL=UsageModel.js.map