"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Pinecone Inference API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelInfoSupportedParameterToJSON = exports.ModelInfoSupportedParameterFromJSONTyped = exports.ModelInfoSupportedParameterFromJSON = exports.instanceOfModelInfoSupportedParameter = void 0;
const runtime_1 = require("../runtime");
const ModelInfoSupportedParameterAllowedValuesInner_1 = require("./ModelInfoSupportedParameterAllowedValuesInner");
const ModelInfoSupportedParameterDefault_1 = require("./ModelInfoSupportedParameterDefault");
/**
 * Check if a given object implements the ModelInfoSupportedParameter interface.
 */
function instanceOfModelInfoSupportedParameter(value) {
    let isInstance = true;
    isInstance = isInstance && "parameter" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "valueType" in value;
    isInstance = isInstance && "required" in value;
    return isInstance;
}
exports.instanceOfModelInfoSupportedParameter = instanceOfModelInfoSupportedParameter;
function ModelInfoSupportedParameterFromJSON(json) {
    return ModelInfoSupportedParameterFromJSONTyped(json, false);
}
exports.ModelInfoSupportedParameterFromJSON = ModelInfoSupportedParameterFromJSON;
function ModelInfoSupportedParameterFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'parameter': json['parameter'],
        'type': json['type'],
        'valueType': json['value_type'],
        'required': json['required'],
        'allowedValues': !(0, runtime_1.exists)(json, 'allowed_values') ? undefined : (json['allowed_values'].map(ModelInfoSupportedParameterAllowedValuesInner_1.ModelInfoSupportedParameterAllowedValuesInnerFromJSON)),
        'min': !(0, runtime_1.exists)(json, 'min') ? undefined : json['min'],
        'max': !(0, runtime_1.exists)(json, 'max') ? undefined : json['max'],
        '_default': !(0, runtime_1.exists)(json, 'default') ? undefined : (0, ModelInfoSupportedParameterDefault_1.ModelInfoSupportedParameterDefaultFromJSON)(json['default']),
    };
}
exports.ModelInfoSupportedParameterFromJSONTyped = ModelInfoSupportedParameterFromJSONTyped;
function ModelInfoSupportedParameterToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'parameter': value.parameter,
        'type': value.type,
        'value_type': value.valueType,
        'required': value.required,
        'allowed_values': value.allowedValues === undefined ? undefined : (value.allowedValues.map(ModelInfoSupportedParameterAllowedValuesInner_1.ModelInfoSupportedParameterAllowedValuesInnerToJSON)),
        'min': value.min,
        'max': value.max,
        'default': (0, ModelInfoSupportedParameterDefault_1.ModelInfoSupportedParameterDefaultToJSON)(value._default),
    };
}
exports.ModelInfoSupportedParameterToJSON = ModelInfoSupportedParameterToJSON;
//# sourceMappingURL=ModelInfoSupportedParameter.js.map