/**
 * Pinecone Control Plane API
 * Pinecone is a vector database that makes it easy to search and retrieve billions of high-dimensional vectors.
 *
 * The version of the OpenAPI document: 2025-04
 * Contact: support@pinecone.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The embedding model and document fields mapped to embedding inputs.
 * @export
 * @interface ModelIndexEmbed
 */
export interface ModelIndexEmbed {
    /**
     * The name of the embedding model used to create the index.
     * @type {string}
     * @memberof ModelIndexEmbed
     */
    model: string;
    /**
     * The distance metric to be used for similarity search. You can use 'euclidean', 'cosine', or 'dotproduct'. If not specified, the metric will be defaulted according to the model. Cannot be updated once set.
     * @type {string}
     * @memberof ModelIndexEmbed
     */
    metric?: ModelIndexEmbedMetricEnum;
    /**
     * The dimensions of the vectors to be inserted in the index.
     * @type {number}
     * @memberof ModelIndexEmbed
     */
    dimension?: number;
    /**
     * The index vector type. You can use 'dense' or 'sparse'. If 'dense', the vector dimension must be specified.  If 'sparse', the vector dimension should not be specified.
     * @type {string}
     * @memberof ModelIndexEmbed
     */
    vectorType?: string;
    /**
     * Identifies the name of the text field from your document model that is embedded.
     * @type {object}
     * @memberof ModelIndexEmbed
     */
    fieldMap?: object;
    /**
     * The read parameters for the embedding model.
     * @type {object}
     * @memberof ModelIndexEmbed
     */
    readParameters?: object;
    /**
     * The write parameters for the embedding model.
     * @type {object}
     * @memberof ModelIndexEmbed
     */
    writeParameters?: object;
}
/**
 * @export
 */
export declare const ModelIndexEmbedMetricEnum: {
    readonly Cosine: "cosine";
    readonly Euclidean: "euclidean";
    readonly Dotproduct: "dotproduct";
};
export type ModelIndexEmbedMetricEnum = typeof ModelIndexEmbedMetricEnum[keyof typeof ModelIndexEmbedMetricEnum];
/**
 * Check if a given object implements the ModelIndexEmbed interface.
 */
export declare function instanceOfModelIndexEmbed(value: object): boolean;
export declare function ModelIndexEmbedFromJSON(json: any): ModelIndexEmbed;
export declare function ModelIndexEmbedFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelIndexEmbed;
export declare function ModelIndexEmbedToJSON(value?: ModelIndexEmbed | null): any;
