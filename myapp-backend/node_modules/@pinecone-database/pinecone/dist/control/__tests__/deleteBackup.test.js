"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deleteBackup_1 = require("../deleteBackup");
const errors_1 = require("../../errors");
describe('deleteBackup', () => {
    const setupSuccessResponse = (responseData) => {
        const fakeDeleteBackup = jest
            .fn()
            .mockImplementation(() => Promise.resolve(responseData));
        const MIA = {
            deleteBackup: fakeDeleteBackup,
        };
        return MIA;
    };
    test('calls the openapi delete backup endpoint, passing backupId', async () => {
        const MIA = setupSuccessResponse(undefined);
        const returned = await (0, deleteBackup_1.deleteBackup)(MIA)('backup-id');
        expect(returned).toEqual(undefined);
        expect(MIA.deleteBackup).toHaveBeenCalledWith({
            backupId: 'backup-id',
        });
    });
    test('should throw backupId is not provided', async () => {
        const MIA = setupSuccessResponse('');
        // @ts-ignore
        await expect((0, deleteBackup_1.deleteBackup)(MIA)()).rejects.toThrow('You must pass a non-empty string for `backupId` in order to delete a backup');
        await expect((0, deleteBackup_1.deleteBackup)(MIA)('')).rejects.toThrow(errors_1.PineconeArgumentError);
    });
});
//# sourceMappingURL=deleteBackup.test.js.map