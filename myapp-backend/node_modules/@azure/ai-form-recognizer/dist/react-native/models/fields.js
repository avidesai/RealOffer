// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import { toBoundingRegions } from "../transforms/polygon.js";
import { capitalize } from "../util.js";
/**
 * Convert a record of generated fields to a record of strongly-typed fields.
 * @internal
 * @param fields - a map of field names to generated field values
 * @returns - an object with the same keys, where all values have been mapped to DocumentFields
 */
export function toAnalyzedDocumentFieldsFromGenerated(fields) {
    return Object.entries(fields !== null && fields !== void 0 ? fields : {}).reduce((transformedFields, [name, value]) => {
        transformedFields[name] = toDocumentField(value);
        return transformedFields;
    }, {});
}
/**
 * Convert a generated document field into a strong TypeScriptified document field.
 * @internal
 */
export function toDocumentField(field) {
    const kind = field.type;
    const value = (() => {
        var _a, _b;
        switch (kind) {
            // Almost all value kinds are represented as simple elemental values
            case "string":
            case "date":
            case "time":
            case "phoneNumber":
            case "number":
            case "boolean":
            case "integer":
            case "selectionMark":
            case "countryRegion":
            case "signature":
            case "currency":
            case "address":
                return {
                    value: field[("value" + capitalize(kind))],
                };
            case "array":
                return { values: (_a = field.valueArray) === null || _a === void 0 ? void 0 : _a.map((v) => { var _a; return (_a = toDocumentField(v)) !== null && _a !== void 0 ? _a : []; }) };
            case "object":
                return { properties: toAnalyzedDocumentFieldsFromGenerated((_b = field.valueObject) !== null && _b !== void 0 ? _b : {}) };
            default:
                // Exhaustiveness check
                // eslint-disable-next-line no-case-declarations
                const __exhaust = kind;
                throw new Error(`Unrecognized DocumentField type: ${__exhaust}`);
        }
    })();
    return Object.assign(Object.assign({ kind }, value), { boundingRegions: toBoundingRegions(field.boundingRegions), content: field.content, spans: field.spans, confidence: field.confidence });
}
//# sourceMappingURL=fields.js.map