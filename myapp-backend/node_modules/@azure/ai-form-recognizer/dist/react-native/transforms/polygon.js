// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
export function toBoundingPolygon(original) {
    const points = [];
    if (!original)
        return;
    if (original.length % 2 !== 0) {
        throw new Error("Unexpected number of points in the response, unable to translate as 2D points");
    }
    for (let i = 0; i < original.length; i += 2) {
        points.push({ x: original[i], y: original[i + 1] });
    }
    return points;
}
export function toBoundingRegions(original) {
    return original === null || original === void 0 ? void 0 : original.map((region) => (Object.assign(Object.assign({}, region), { polygon: toBoundingPolygon(region.polygon) })));
}
export function toDocumentTableFromGenerated(table) {
    return Object.assign(Object.assign({}, table), { boundingRegions: toBoundingRegions(table.boundingRegions), cells: table.cells.map((cell) => (Object.assign(Object.assign({}, cell), { boundingRegions: toBoundingRegions(cell.boundingRegions) }))) });
}
export function toKeyValuePairFromGenerated(pair) {
    var _a;
    return Object.assign(Object.assign({}, pair), { key: Object.assign(Object.assign({}, pair.key), { boundingRegions: toBoundingRegions(pair.key.boundingRegions) }), value: pair.value
            ? Object.assign(Object.assign({}, pair.value), { boundingRegions: toBoundingRegions((_a = pair.value) === null || _a === void 0 ? void 0 : _a.boundingRegions) }) : undefined });
}
//# sourceMappingURL=polygon.js.map