{"version":3,"file":"documentModels.js","sourceRoot":"","sources":["../../../../src/generated/operations/documentModels.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { DocumentModels } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { GeneratedClient } from \"../generatedClient.js\";\nimport {\n  DocumentModelSummary,\n  DocumentModelsListModelsNextOptionalParams,\n  DocumentModelsListModelsOptionalParams,\n  ContentType,\n  DocumentModelsAnalyzeDocument$binaryOptionalParams,\n  DocumentModelsAnalyzeDocument$textOptionalParams,\n  DocumentModelsAnalyzeDocument$jsonOptionalParams,\n  DocumentModelsAnalyzeDocumentResponse,\n  DocumentModelsGetAnalyzeResultOptionalParams,\n  DocumentModelsGetAnalyzeResultResponse,\n  BuildDocumentModelRequest,\n  DocumentModelsBuildModelOptionalParams,\n  DocumentModelsBuildModelResponse,\n  ComposeDocumentModelRequest,\n  DocumentModelsComposeModelOptionalParams,\n  DocumentModelsComposeModelResponse,\n  AuthorizeCopyRequest,\n  DocumentModelsAuthorizeModelCopyOptionalParams,\n  DocumentModelsAuthorizeModelCopyResponse,\n  CopyAuthorization,\n  DocumentModelsCopyModelToOptionalParams,\n  DocumentModelsCopyModelToResponse,\n  DocumentModelsListModelsResponse,\n  DocumentModelsGetModelOptionalParams,\n  DocumentModelsGetModelResponse,\n  DocumentModelsDeleteModelOptionalParams,\n  DocumentModelsListModelsNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DocumentModels operations. */\nexport class DocumentModelsImpl implements DocumentModels {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class DocumentModels class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all document models\n   * @param options The options parameters.\n   */\n  public listModels(\n    options?: DocumentModelsListModelsOptionalParams\n  ): PagedAsyncIterableIterator<DocumentModelSummary> {\n    const iter = this.listModelsPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listModelsPagingPage(options);\n      }\n    };\n  }\n\n  private async *listModelsPagingPage(\n    options?: DocumentModelsListModelsOptionalParams\n  ): AsyncIterableIterator<DocumentModelSummary[]> {\n    let result = await this._listModels(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listModelsNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listModelsPagingAll(\n    options?: DocumentModelsListModelsOptionalParams\n  ): AsyncIterableIterator<DocumentModelSummary> {\n    for await (const page of this.listModelsPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Analyzes document with document model.\n   * @param modelId Unique document model name.\n   * @param contentType Upload file type\n   * @param options The options parameters.\n   */\n  analyzeDocument(\n    modelId: string,\n    contentType: ContentType,\n    options?: DocumentModelsAnalyzeDocument$binaryOptionalParams\n  ): Promise<DocumentModelsAnalyzeDocumentResponse>;\n  /**\n   * Analyzes document with document model.\n   * @param modelId Unique document model name.\n   * @param contentType Upload file type\n   * @param options The options parameters.\n   */\n  analyzeDocument(\n    modelId: string,\n    contentType: \"text/html\",\n    options?: DocumentModelsAnalyzeDocument$textOptionalParams\n  ): Promise<DocumentModelsAnalyzeDocumentResponse>;\n  /**\n   * Analyzes document with document model.\n   * @param modelId Unique document model name.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeDocument(\n    modelId: string,\n    contentType: \"application/json\",\n    options?: DocumentModelsAnalyzeDocument$jsonOptionalParams\n  ): Promise<DocumentModelsAnalyzeDocumentResponse>;\n  /**\n   * Analyzes document with document model.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeDocument(\n    ...args:\n      | [\n          string,\n          ContentType,\n          DocumentModelsAnalyzeDocument$binaryOptionalParams?\n        ]\n      | [string, \"text/html\", DocumentModelsAnalyzeDocument$textOptionalParams?]\n      | [\n          string,\n          \"application/json\",\n          DocumentModelsAnalyzeDocument$jsonOptionalParams?\n        ]\n  ): Promise<DocumentModelsAnalyzeDocumentResponse> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[1] === \"application/octet-stream\" ||\n      args[1] === \"application/pdf\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      args[1] === \"image/bmp\" ||\n      args[1] === \"image/heif\" ||\n      args[1] === \"image/jpeg\" ||\n      args[1] === \"image/png\" ||\n      args[1] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeDocument$binaryOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else if (args[1] === \"text/html\") {\n      operationSpec = analyzeDocument$textOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else if (args[1] === \"application/json\") {\n      operationSpec = analyzeDocument$jsonOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Gets the result of document analysis.\n   * @param modelId Unique document model name.\n   * @param resultId Analyze operation result ID.\n   * @param options The options parameters.\n   */\n  getAnalyzeResult(\n    modelId: string,\n    resultId: string,\n    options?: DocumentModelsGetAnalyzeResultOptionalParams\n  ): Promise<DocumentModelsGetAnalyzeResultResponse> {\n    return this.client.sendOperationRequest(\n      { modelId, resultId, options },\n      getAnalyzeResultOperationSpec\n    );\n  }\n\n  /**\n   * Builds a custom document analysis model.\n   * @param buildRequest Building request parameters.\n   * @param options The options parameters.\n   */\n  buildModel(\n    buildRequest: BuildDocumentModelRequest,\n    options?: DocumentModelsBuildModelOptionalParams\n  ): Promise<DocumentModelsBuildModelResponse> {\n    return this.client.sendOperationRequest(\n      { buildRequest, options },\n      buildModelOperationSpec\n    );\n  }\n\n  /**\n   * Creates a new document model from document types of existing document models.\n   * @param composeRequest Compose request parameters.\n   * @param options The options parameters.\n   */\n  composeModel(\n    composeRequest: ComposeDocumentModelRequest,\n    options?: DocumentModelsComposeModelOptionalParams\n  ): Promise<DocumentModelsComposeModelResponse> {\n    return this.client.sendOperationRequest(\n      { composeRequest, options },\n      composeModelOperationSpec\n    );\n  }\n\n  /**\n   * Generates authorization to copy a document model to this location with specified modelId and\n   * optional description.\n   * @param authorizeCopyRequest Authorize copy request parameters.\n   * @param options The options parameters.\n   */\n  authorizeModelCopy(\n    authorizeCopyRequest: AuthorizeCopyRequest,\n    options?: DocumentModelsAuthorizeModelCopyOptionalParams\n  ): Promise<DocumentModelsAuthorizeModelCopyResponse> {\n    return this.client.sendOperationRequest(\n      { authorizeCopyRequest, options },\n      authorizeModelCopyOperationSpec\n    );\n  }\n\n  /**\n   * Copies document model to the target resource, region, and modelId.\n   * @param modelId Unique document model name.\n   * @param copyToRequest Copy to request parameters.\n   * @param options The options parameters.\n   */\n  copyModelTo(\n    modelId: string,\n    copyToRequest: CopyAuthorization,\n    options?: DocumentModelsCopyModelToOptionalParams\n  ): Promise<DocumentModelsCopyModelToResponse> {\n    return this.client.sendOperationRequest(\n      { modelId, copyToRequest, options },\n      copyModelToOperationSpec\n    );\n  }\n\n  /**\n   * List all document models\n   * @param options The options parameters.\n   */\n  private _listModels(\n    options?: DocumentModelsListModelsOptionalParams\n  ): Promise<DocumentModelsListModelsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listModelsOperationSpec\n    );\n  }\n\n  /**\n   * Gets detailed document model information.\n   * @param modelId Unique document model name.\n   * @param options The options parameters.\n   */\n  getModel(\n    modelId: string,\n    options?: DocumentModelsGetModelOptionalParams\n  ): Promise<DocumentModelsGetModelResponse> {\n    return this.client.sendOperationRequest(\n      { modelId, options },\n      getModelOperationSpec\n    );\n  }\n\n  /**\n   * Deletes document model.\n   * @param modelId Unique document model name.\n   * @param options The options parameters.\n   */\n  deleteModel(\n    modelId: string,\n    options?: DocumentModelsDeleteModelOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { modelId, options },\n      deleteModelOperationSpec\n    );\n  }\n\n  /**\n   * ListModelsNext\n   * @param nextLink The nextLink from the previous successful call to the ListModels method.\n   * @param options The options parameters.\n   */\n  private _listModelsNext(\n    nextLink: string,\n    options?: DocumentModelsListModelsNextOptionalParams\n  ): Promise<DocumentModelsListModelsNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listModelsNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst analyzeDocument$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.analyzeRequest,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.locale,\n    Parameters.stringIndexType,\n    Parameters.apiVersion,\n    Parameters.features\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeDocument$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.analyzeRequest1,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.locale,\n    Parameters.stringIndexType,\n    Parameters.apiVersion,\n    Parameters.features\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\nconst analyzeDocument$jsonOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.analyzeRequest2,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.locale,\n    Parameters.stringIndexType,\n    Parameters.apiVersion,\n    Parameters.features\n  ],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType2, Parameters.accept2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResultOperation\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst buildModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:build\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsBuildModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.buildRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2, Parameters.contentType3],\n  mediaType: \"json\",\n  serializer\n};\nconst composeModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:compose\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsComposeModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.composeRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2, Parameters.contentType3],\n  mediaType: \"json\",\n  serializer\n};\nconst authorizeModelCopyOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels:authorizeCopy\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CopyAuthorization\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.authorizeCopyRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2, Parameters.contentType3],\n  mediaType: \"json\",\n  serializer\n};\nconst copyModelToOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}:copyTo\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentModelsCopyModelToHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.copyToRequest,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept2, Parameters.contentType3],\n  mediaType: \"json\",\n  serializer\n};\nconst listModelsOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentModelsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst getModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DocumentModelDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst deleteModelOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentModels/{modelId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst listModelsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentModelsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\n"]}