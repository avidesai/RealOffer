{"version":3,"file":"miscellaneous.js","sourceRoot":"","sources":["../../../../src/generated/operations/miscellaneous.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { Miscellaneous } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { GeneratedClient } from \"../generatedClient.js\";\nimport {\n  OperationSummary,\n  MiscellaneousListOperationsNextOptionalParams,\n  MiscellaneousListOperationsOptionalParams,\n  MiscellaneousListOperationsResponse,\n  MiscellaneousGetOperationOptionalParams,\n  MiscellaneousGetOperationResponse,\n  MiscellaneousGetResourceInfoOptionalParams,\n  MiscellaneousGetResourceInfoResponse,\n  MiscellaneousListOperationsNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing Miscellaneous operations. */\nexport class MiscellaneousImpl implements Miscellaneous {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class Miscellaneous class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists all operations.\n   * @param options The options parameters.\n   */\n  public listOperations(\n    options?: MiscellaneousListOperationsOptionalParams\n  ): PagedAsyncIterableIterator<OperationSummary> {\n    const iter = this.listOperationsPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listOperationsPagingPage(options);\n      }\n    };\n  }\n\n  private async *listOperationsPagingPage(\n    options?: MiscellaneousListOperationsOptionalParams\n  ): AsyncIterableIterator<OperationSummary[]> {\n    let result = await this._listOperations(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listOperationsNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listOperationsPagingAll(\n    options?: MiscellaneousListOperationsOptionalParams\n  ): AsyncIterableIterator<OperationSummary> {\n    for await (const page of this.listOperationsPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists all operations.\n   * @param options The options parameters.\n   */\n  private _listOperations(\n    options?: MiscellaneousListOperationsOptionalParams\n  ): Promise<MiscellaneousListOperationsResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listOperationsOperationSpec\n    );\n  }\n\n  /**\n   * Gets operation info.\n   * @param operationId Unique operation ID.\n   * @param options The options parameters.\n   */\n  getOperation(\n    operationId: string,\n    options?: MiscellaneousGetOperationOptionalParams\n  ): Promise<MiscellaneousGetOperationResponse> {\n    return this.client.sendOperationRequest(\n      { operationId, options },\n      getOperationOperationSpec\n    );\n  }\n\n  /**\n   * Return information about the current resource.\n   * @param options The options parameters.\n   */\n  getResourceInfo(\n    options?: MiscellaneousGetResourceInfoOptionalParams\n  ): Promise<MiscellaneousGetResourceInfoResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      getResourceInfoOperationSpec\n    );\n  }\n\n  /**\n   * ListOperationsNext\n   * @param nextLink The nextLink from the previous successful call to the ListOperations method.\n   * @param options The options parameters.\n   */\n  private _listOperationsNext(\n    nextLink: string,\n    options?: MiscellaneousListOperationsNextOptionalParams\n  ): Promise<MiscellaneousListOperationsNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listOperationsNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationsOperationSpec: coreClient.OperationSpec = {\n  path: \"/operations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetOperationsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst getOperationOperationSpec: coreClient.OperationSpec = {\n  path: \"/operations/{operationId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.OperationDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.operationId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst getResourceInfoOperationSpec: coreClient.OperationSpec = {\n  path: \"/info\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ResourceDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst listOperationsNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetOperationsResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\n"]}