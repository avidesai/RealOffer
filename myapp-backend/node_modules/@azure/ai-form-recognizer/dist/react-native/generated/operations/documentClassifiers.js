/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/// <reference lib="esnext.asynciterable" />
/** Class containing DocumentClassifiers operations. */
export class DocumentClassifiersImpl {
    /**
     * Initialize a new instance of the class DocumentClassifiers class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all document classifiers.
     * @param options The options parameters.
     */
    listClassifiers(options) {
        const iter = this.listClassifiersPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listClassifiersPagingPage(options);
            }
        };
    }
    listClassifiersPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listClassifiersPagingPage_1() {
            let result = yield __await(this._listClassifiers(options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listClassifiersNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listClassifiersPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listClassifiersPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.listClassifiersPagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Builds a custom document classifier.
     * @param buildRequest Building request parameters.
     * @param options The options parameters.
     */
    buildClassifier(buildRequest, options) {
        return this.client.sendOperationRequest({ buildRequest, options }, buildClassifierOperationSpec);
    }
    /**
     * List all document classifiers.
     * @param options The options parameters.
     */
    _listClassifiers(options) {
        return this.client.sendOperationRequest({ options }, listClassifiersOperationSpec);
    }
    /**
     * Gets detailed document classifier information.
     * @param classifierId Unique document classifier name.
     * @param options The options parameters.
     */
    getClassifier(classifierId, options) {
        return this.client.sendOperationRequest({ classifierId, options }, getClassifierOperationSpec);
    }
    /**
     * Deletes document classifier.
     * @param classifierId Unique document classifier name.
     * @param options The options parameters.
     */
    deleteClassifier(classifierId, options) {
        return this.client.sendOperationRequest({ classifierId, options }, deleteClassifierOperationSpec);
    }
    /**
     * Classifies document with document classifier.
     * @param args Includes all the parameters for this operation.
     */
    classifyDocument(...args) {
        let operationSpec;
        let operationArguments;
        let options;
        if (args[1] === "application/octet-stream" ||
            args[1] === "application/pdf" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.presentationml.presentation" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
            args[1] === "image/bmp" ||
            args[1] === "image/heif" ||
            args[1] === "image/jpeg" ||
            args[1] === "image/png" ||
            args[1] === "image/tiff") {
            operationSpec = classifyDocument$binaryOperationSpec;
            operationArguments = {
                classifierId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else if (args[1] === "text/html") {
            operationSpec = classifyDocument$textOperationSpec;
            operationArguments = {
                classifierId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else if (args[1] === "application/json") {
            operationSpec = classifyDocument$jsonOperationSpec;
            operationArguments = {
                classifierId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else {
            throw new TypeError(`"contentType" must be a valid value but instead was "${args[1]}".`);
        }
        operationArguments.options = options || {};
        return this.client.sendOperationRequest(operationArguments, operationSpec);
    }
    /**
     * Gets the result of document classifier.
     * @param classifierId Unique document classifier name.
     * @param resultId Analyze operation result ID.
     * @param options The options parameters.
     */
    getClassifyResult(classifierId, resultId, options) {
        return this.client.sendOperationRequest({ classifierId, resultId, options }, getClassifyResultOperationSpec);
    }
    /**
     * ListClassifiersNext
     * @param nextLink The nextLink from the previous successful call to the ListClassifiers method.
     * @param options The options parameters.
     */
    _listClassifiersNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listClassifiersNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const buildClassifierOperationSpec = {
    path: "/documentClassifiers:build",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentClassifiersBuildClassifierHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.buildRequest1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2, Parameters.contentType3],
    mediaType: "json",
    serializer
};
const listClassifiersOperationSpec = {
    path: "/documentClassifiers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetDocumentClassifiersResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2],
    serializer
};
const getClassifierOperationSpec = {
    path: "/documentClassifiers/{classifierId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DocumentClassifierDetails
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.classifierId],
    headerParameters: [Parameters.accept2],
    serializer
};
const deleteClassifierOperationSpec = {
    path: "/documentClassifiers/{classifierId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.classifierId],
    headerParameters: [Parameters.accept2],
    serializer
};
const classifyDocument$binaryOperationSpec = {
    path: "/documentClassifiers/{classifierId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.classifyRequest,
    queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.classifierId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "binary",
    serializer
};
const classifyDocument$textOperationSpec = {
    path: "/documentClassifiers/{classifierId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.classifyRequest1,
    queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.classifierId],
    headerParameters: [Parameters.contentType1, Parameters.accept1],
    mediaType: "text",
    serializer
};
const classifyDocument$jsonOperationSpec = {
    path: "/documentClassifiers/{classifierId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.classifyRequest2,
    queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.classifierId],
    headerParameters: [Parameters.contentType2, Parameters.accept2],
    mediaType: "json",
    serializer
};
const getClassifyResultOperationSpec = {
    path: "/documentClassifiers/{classifierId}/analyzeResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeResultOperation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.resultId,
        Parameters.classifierId
    ],
    headerParameters: [Parameters.accept2],
    serializer
};
const listClassifiersNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetDocumentClassifiersResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept2],
    serializer
};
//# sourceMappingURL=documentClassifiers.js.map