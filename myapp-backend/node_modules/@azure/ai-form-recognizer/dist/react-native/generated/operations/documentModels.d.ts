import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DocumentModels } from "../operationsInterfaces/index.js";
import { GeneratedClient } from "../generatedClient.js";
import { DocumentModelSummary, DocumentModelsListModelsOptionalParams, ContentType, DocumentModelsAnalyzeDocument$binaryOptionalParams, DocumentModelsAnalyzeDocument$textOptionalParams, DocumentModelsAnalyzeDocument$jsonOptionalParams, DocumentModelsAnalyzeDocumentResponse, DocumentModelsGetAnalyzeResultOptionalParams, DocumentModelsGetAnalyzeResultResponse, BuildDocumentModelRequest, DocumentModelsBuildModelOptionalParams, DocumentModelsBuildModelResponse, ComposeDocumentModelRequest, DocumentModelsComposeModelOptionalParams, DocumentModelsComposeModelResponse, AuthorizeCopyRequest, DocumentModelsAuthorizeModelCopyOptionalParams, DocumentModelsAuthorizeModelCopyResponse, CopyAuthorization, DocumentModelsCopyModelToOptionalParams, DocumentModelsCopyModelToResponse, DocumentModelsGetModelOptionalParams, DocumentModelsGetModelResponse, DocumentModelsDeleteModelOptionalParams } from "../models/index.js";
/** Class containing DocumentModels operations. */
export declare class DocumentModelsImpl implements DocumentModels {
    private readonly client;
    /**
     * Initialize a new instance of the class DocumentModels class.
     * @param client Reference to the service client
     */
    constructor(client: GeneratedClient);
    /**
     * List all document models
     * @param options The options parameters.
     */
    listModels(options?: DocumentModelsListModelsOptionalParams): PagedAsyncIterableIterator<DocumentModelSummary>;
    private listModelsPagingPage;
    private listModelsPagingAll;
    /**
     * Analyzes document with document model.
     * @param modelId Unique document model name.
     * @param contentType Upload file type
     * @param options The options parameters.
     */
    analyzeDocument(modelId: string, contentType: ContentType, options?: DocumentModelsAnalyzeDocument$binaryOptionalParams): Promise<DocumentModelsAnalyzeDocumentResponse>;
    /**
     * Analyzes document with document model.
     * @param modelId Unique document model name.
     * @param contentType Upload file type
     * @param options The options parameters.
     */
    analyzeDocument(modelId: string, contentType: "text/html", options?: DocumentModelsAnalyzeDocument$textOptionalParams): Promise<DocumentModelsAnalyzeDocumentResponse>;
    /**
     * Analyzes document with document model.
     * @param modelId Unique document model name.
     * @param contentType Body Parameter content-type
     * @param options The options parameters.
     */
    analyzeDocument(modelId: string, contentType: "application/json", options?: DocumentModelsAnalyzeDocument$jsonOptionalParams): Promise<DocumentModelsAnalyzeDocumentResponse>;
    /**
     * Gets the result of document analysis.
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param options The options parameters.
     */
    getAnalyzeResult(modelId: string, resultId: string, options?: DocumentModelsGetAnalyzeResultOptionalParams): Promise<DocumentModelsGetAnalyzeResultResponse>;
    /**
     * Builds a custom document analysis model.
     * @param buildRequest Building request parameters.
     * @param options The options parameters.
     */
    buildModel(buildRequest: BuildDocumentModelRequest, options?: DocumentModelsBuildModelOptionalParams): Promise<DocumentModelsBuildModelResponse>;
    /**
     * Creates a new document model from document types of existing document models.
     * @param composeRequest Compose request parameters.
     * @param options The options parameters.
     */
    composeModel(composeRequest: ComposeDocumentModelRequest, options?: DocumentModelsComposeModelOptionalParams): Promise<DocumentModelsComposeModelResponse>;
    /**
     * Generates authorization to copy a document model to this location with specified modelId and
     * optional description.
     * @param authorizeCopyRequest Authorize copy request parameters.
     * @param options The options parameters.
     */
    authorizeModelCopy(authorizeCopyRequest: AuthorizeCopyRequest, options?: DocumentModelsAuthorizeModelCopyOptionalParams): Promise<DocumentModelsAuthorizeModelCopyResponse>;
    /**
     * Copies document model to the target resource, region, and modelId.
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param options The options parameters.
     */
    copyModelTo(modelId: string, copyToRequest: CopyAuthorization, options?: DocumentModelsCopyModelToOptionalParams): Promise<DocumentModelsCopyModelToResponse>;
    /**
     * List all document models
     * @param options The options parameters.
     */
    private _listModels;
    /**
     * Gets detailed document model information.
     * @param modelId Unique document model name.
     * @param options The options parameters.
     */
    getModel(modelId: string, options?: DocumentModelsGetModelOptionalParams): Promise<DocumentModelsGetModelResponse>;
    /**
     * Deletes document model.
     * @param modelId Unique document model name.
     * @param options The options parameters.
     */
    deleteModel(modelId: string, options?: DocumentModelsDeleteModelOptionalParams): Promise<void>;
    /**
     * ListModelsNext
     * @param nextLink The nextLink from the previous successful call to the ListModels method.
     * @param options The options parameters.
     */
    private _listModelsNext;
}
//# sourceMappingURL=documentModels.d.ts.map