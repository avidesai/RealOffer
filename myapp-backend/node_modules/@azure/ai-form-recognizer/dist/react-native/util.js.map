{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AACrD,OAAO,EAAE,+BAA+B,EAAE,MAAM,2BAA2B,CAAC;AAC5E,OAAO,EAAE,4CAA4C,EAAE,MAAM,+BAA+B,CAAC;AAC7F,OAAO,EAAE,uBAAuB,EAAE,2BAA2B,EAAE,MAAM,gBAAgB,CAAC;AAEtF,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EACL,gCAAgC,GAEjC,MAAM,0CAA0C,CAAC;AAElD,OAAO,KAAK,OAAO,MAAM,+BAA+B,CAAC;AACzD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,CAAC;AAEnB,2CAA2C;AAC3C,MAAM,CAAC,MAAM,UAAU,GAAG,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AAE3D;;;GAGG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAA4B,CAAS,EAAmB,EAAE,CACpF,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAoB,CAAC;AAExE;;;GAGG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAA4B,CAAI,EAAiB,EAAE,CAC3E,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAkB,CAAC;AAEtE;;;GAGG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAS,EAAW,EAAE;IAChD,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAS,KAAqB,EAAE,CAAgB,EAAkB,EAAE,CAC1F,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAE7C;;;GAGG;AACH,MAAM,UAAU,iBAAiB,CAC/B,QAAgB,EAChB,UAA2C,EAC3C,OAAwF;;IAExF,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,gDAC1D,gCAAgC,GAChC,OAAO,KACV,UAAU,EAAE,2BAA2B,IACvC,CAAC;IAEH,MAAM,UAAU,GAAG,iBAAiB,CAAC,UAAU,CAAC;QAC9C,CAAC,CAAC,+BAA+B,CAAC;YAC9B,UAAU;YACV,MAAM,EAAE,CAAC,MAAA,OAAO,CAAC,QAAQ,mCAAI,uBAAuB,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBAClE,IAAI,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAC9C,OAAO,GAAG,KAAK,WAAW,CAAC;YAC7B,CAAC,CAAC;SACH,CAAC;QACJ,CAAC,CAAC,4CAA4C,CAAC,UAAU,CAAC,CAAC;IAE7D,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAEtC,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { isTokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\nimport { createFormRecognizerAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy.js\";\nimport { DEFAULT_COGNITIVE_SCOPE, FORM_RECOGNIZER_API_VERSION } from \"./constants.js\";\nimport type { GeneratedClientOptionalParams } from \"./generated/index.js\";\nimport { GeneratedClient } from \"./generated/index.js\";\nimport {\n  DEFAULT_GENERATED_CLIENT_OPTIONS,\n  type DocumentAnalysisClientOptions,\n} from \"./options/FormRecognizerClientOptions.js\";\n\nimport * as Mappers from \"./generated/models/mappers.js\";\nimport { createSerializer } from \"@azure/core-client\";\nexport { Mappers };\n\n// This is used for URL request processing.\nexport const SERIALIZER = createSerializer(Mappers, false);\n\n/**\n * Type-strong uncapitalization.\n * @internal\n */\nexport const uncapitalize = <S extends string = string>(s: string): Uncapitalize<S> =>\n  (s.substring(0, 1).toLowerCase() + s.substring(1)) as Uncapitalize<S>;\n\n/**\n * Type-strong capitalization\n * @internal\n */\nexport const capitalize = <S extends string = string>(s: S): Capitalize<S> =>\n  (s.substring(0, 1).toUpperCase() + s.substring(1)) as Capitalize<S>;\n\n/**\n * Tests if a string looks like it begins with an acronym, i.e. it starts with two capital letters.\n * @internal\n */\nexport const isAcronymic = (s: string): boolean => {\n  return /^[A-Z][A-Z]/.test(s);\n};\n\n/**\n * Map an optional value through a function\n * @internal\n */\nexport const maybemap = <T1, T2>(value: T1 | undefined, f: (v: T1) => T2): T2 | undefined =>\n  value === undefined ? undefined : f(value);\n\n/**\n * Create a GeneratedClient.\n * @internal\n */\nexport function makeServiceClient(\n  endpoint: string,\n  credential: KeyCredential | TokenCredential,\n  options: GeneratedClientOptionalParams & Pick<DocumentAnalysisClientOptions, \"audience\">,\n): GeneratedClient {\n  const client = new GeneratedClient(endpoint?.replace(/\\/$/, \"\"), {\n    ...DEFAULT_GENERATED_CLIENT_OPTIONS,\n    ...options,\n    apiVersion: FORM_RECOGNIZER_API_VERSION,\n  });\n\n  const authPolicy = isTokenCredential(credential)\n    ? bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: [options.audience ?? DEFAULT_COGNITIVE_SCOPE].map((scope) => {\n          if (scope.endsWith(\"/.default\")) return scope;\n          return `${scope}/.default`;\n        }),\n      })\n    : createFormRecognizerAzureKeyCredentialPolicy(credential);\n\n  client.pipeline.addPolicy(authPolicy);\n\n  return client;\n}\n"]}