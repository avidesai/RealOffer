import type { KeyCredential, TokenCredential } from "@azure/core-auth";
import type { GeneratedClientOptionalParams } from "./generated/index.js";
import { GeneratedClient } from "./generated/index.js";
import { type DocumentAnalysisClientOptions } from "./options/FormRecognizerClientOptions.js";
import * as Mappers from "./generated/models/mappers.js";
export { Mappers };
export declare const SERIALIZER: import("@azure/core-client").Serializer;
/**
 * Type-strong uncapitalization.
 * @internal
 */
export declare const uncapitalize: <S extends string = string>(s: string) => Uncapitalize<S>;
/**
 * Type-strong capitalization
 * @internal
 */
export declare const capitalize: <S extends string = string>(s: S) => Capitalize<S>;
/**
 * Tests if a string looks like it begins with an acronym, i.e. it starts with two capital letters.
 * @internal
 */
export declare const isAcronymic: (s: string) => boolean;
/**
 * Map an optional value through a function
 * @internal
 */
export declare const maybemap: <T1, T2>(value: T1 | undefined, f: (v: T1) => T2) => T2 | undefined;
/**
 * Create a GeneratedClient.
 * @internal
 */
export declare function makeServiceClient(endpoint: string, credential: KeyCredential | TokenCredential, options: GeneratedClientOptionalParams & Pick<DocumentAnalysisClientOptions, "audience">): GeneratedClient;
//# sourceMappingURL=util.d.ts.map