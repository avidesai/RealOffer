{"version":3,"file":"documentClassifiers.js","sourceRoot":"","sources":["../../../../src/generated/operations/documentClassifiers.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport { DocumentClassifiers } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { GeneratedClient } from \"../generatedClient.js\";\nimport {\n  DocumentClassifierDetails,\n  DocumentClassifiersListClassifiersNextOptionalParams,\n  DocumentClassifiersListClassifiersOptionalParams,\n  BuildDocumentClassifierRequest,\n  DocumentClassifiersBuildClassifierOptionalParams,\n  DocumentClassifiersBuildClassifierResponse,\n  DocumentClassifiersListClassifiersResponse,\n  DocumentClassifiersGetClassifierOptionalParams,\n  DocumentClassifiersGetClassifierResponse,\n  DocumentClassifiersDeleteClassifierOptionalParams,\n  ContentType,\n  DocumentClassifiersClassifyDocument$binaryOptionalParams,\n  DocumentClassifiersClassifyDocument$textOptionalParams,\n  DocumentClassifiersClassifyDocument$jsonOptionalParams,\n  DocumentClassifiersClassifyDocumentResponse,\n  DocumentClassifiersGetClassifyResultOptionalParams,\n  DocumentClassifiersGetClassifyResultResponse,\n  DocumentClassifiersListClassifiersNextResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Class containing DocumentClassifiers operations. */\nexport class DocumentClassifiersImpl implements DocumentClassifiers {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class DocumentClassifiers class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all document classifiers.\n   * @param options The options parameters.\n   */\n  public listClassifiers(\n    options?: DocumentClassifiersListClassifiersOptionalParams\n  ): PagedAsyncIterableIterator<DocumentClassifierDetails> {\n    const iter = this.listClassifiersPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listClassifiersPagingPage(options);\n      }\n    };\n  }\n\n  private async *listClassifiersPagingPage(\n    options?: DocumentClassifiersListClassifiersOptionalParams\n  ): AsyncIterableIterator<DocumentClassifierDetails[]> {\n    let result = await this._listClassifiers(options);\n    yield result.value || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listClassifiersNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      yield result.value || [];\n    }\n  }\n\n  private async *listClassifiersPagingAll(\n    options?: DocumentClassifiersListClassifiersOptionalParams\n  ): AsyncIterableIterator<DocumentClassifierDetails> {\n    for await (const page of this.listClassifiersPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Builds a custom document classifier.\n   * @param buildRequest Building request parameters.\n   * @param options The options parameters.\n   */\n  buildClassifier(\n    buildRequest: BuildDocumentClassifierRequest,\n    options?: DocumentClassifiersBuildClassifierOptionalParams\n  ): Promise<DocumentClassifiersBuildClassifierResponse> {\n    return this.client.sendOperationRequest(\n      { buildRequest, options },\n      buildClassifierOperationSpec\n    );\n  }\n\n  /**\n   * List all document classifiers.\n   * @param options The options parameters.\n   */\n  private _listClassifiers(\n    options?: DocumentClassifiersListClassifiersOptionalParams\n  ): Promise<DocumentClassifiersListClassifiersResponse> {\n    return this.client.sendOperationRequest(\n      { options },\n      listClassifiersOperationSpec\n    );\n  }\n\n  /**\n   * Gets detailed document classifier information.\n   * @param classifierId Unique document classifier name.\n   * @param options The options parameters.\n   */\n  getClassifier(\n    classifierId: string,\n    options?: DocumentClassifiersGetClassifierOptionalParams\n  ): Promise<DocumentClassifiersGetClassifierResponse> {\n    return this.client.sendOperationRequest(\n      { classifierId, options },\n      getClassifierOperationSpec\n    );\n  }\n\n  /**\n   * Deletes document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param options The options parameters.\n   */\n  deleteClassifier(\n    classifierId: string,\n    options?: DocumentClassifiersDeleteClassifierOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { classifierId, options },\n      deleteClassifierOperationSpec\n    );\n  }\n\n  /**\n   * Classifies document with document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param contentType Upload file type\n   * @param options The options parameters.\n   */\n  classifyDocument(\n    classifierId: string,\n    contentType: ContentType,\n    options?: DocumentClassifiersClassifyDocument$binaryOptionalParams\n  ): Promise<DocumentClassifiersClassifyDocumentResponse>;\n  /**\n   * Classifies document with document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param contentType Upload file type\n   * @param options The options parameters.\n   */\n  classifyDocument(\n    classifierId: string,\n    contentType: \"text/html\",\n    options?: DocumentClassifiersClassifyDocument$textOptionalParams\n  ): Promise<DocumentClassifiersClassifyDocumentResponse>;\n  /**\n   * Classifies document with document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  classifyDocument(\n    classifierId: string,\n    contentType: \"application/json\",\n    options?: DocumentClassifiersClassifyDocument$jsonOptionalParams\n  ): Promise<DocumentClassifiersClassifyDocumentResponse>;\n  /**\n   * Classifies document with document classifier.\n   * @param args Includes all the parameters for this operation.\n   */\n  classifyDocument(\n    ...args:\n      | [\n          string,\n          ContentType,\n          DocumentClassifiersClassifyDocument$binaryOptionalParams?\n        ]\n      | [\n          string,\n          \"text/html\",\n          DocumentClassifiersClassifyDocument$textOptionalParams?\n        ]\n      | [\n          string,\n          \"application/json\",\n          DocumentClassifiersClassifyDocument$jsonOptionalParams?\n        ]\n  ): Promise<DocumentClassifiersClassifyDocumentResponse> {\n    let operationSpec: coreClient.OperationSpec;\n    let operationArguments: coreClient.OperationArguments;\n    let options;\n    if (\n      args[1] === \"application/octet-stream\" ||\n      args[1] === \"application/pdf\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.presentationml.presentation\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" ||\n      args[1] ===\n        \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ||\n      args[1] === \"image/bmp\" ||\n      args[1] === \"image/heif\" ||\n      args[1] === \"image/jpeg\" ||\n      args[1] === \"image/png\" ||\n      args[1] === \"image/tiff\"\n    ) {\n      operationSpec = classifyDocument$binaryOperationSpec;\n      operationArguments = {\n        classifierId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else if (args[1] === \"text/html\") {\n      operationSpec = classifyDocument$textOperationSpec;\n      operationArguments = {\n        classifierId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else if (args[1] === \"application/json\") {\n      operationSpec = classifyDocument$jsonOperationSpec;\n      operationArguments = {\n        classifierId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n      options = args[2];\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    operationArguments.options = options || {};\n    return this.client.sendOperationRequest(operationArguments, operationSpec);\n  }\n\n  /**\n   * Gets the result of document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param resultId Analyze operation result ID.\n   * @param options The options parameters.\n   */\n  getClassifyResult(\n    classifierId: string,\n    resultId: string,\n    options?: DocumentClassifiersGetClassifyResultOptionalParams\n  ): Promise<DocumentClassifiersGetClassifyResultResponse> {\n    return this.client.sendOperationRequest(\n      { classifierId, resultId, options },\n      getClassifyResultOperationSpec\n    );\n  }\n\n  /**\n   * ListClassifiersNext\n   * @param nextLink The nextLink from the previous successful call to the ListClassifiers method.\n   * @param options The options parameters.\n   */\n  private _listClassifiersNext(\n    nextLink: string,\n    options?: DocumentClassifiersListClassifiersNextOptionalParams\n  ): Promise<DocumentClassifiersListClassifiersNextResponse> {\n    return this.client.sendOperationRequest(\n      { nextLink, options },\n      listClassifiersNextOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst buildClassifierOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers:build\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentClassifiersBuildClassifierHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.buildRequest1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2, Parameters.contentType3],\n  mediaType: \"json\",\n  serializer\n};\nconst listClassifiersOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentClassifiersResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst getClassifierOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DocumentClassifierDetails\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.classifierId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst deleteClassifierOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.classifierId],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst classifyDocument$binaryOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.classifyRequest,\n  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.classifierId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"binary\",\n  serializer\n};\nconst classifyDocument$textOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.classifyRequest1,\n  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.classifierId],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\nconst classifyDocument$jsonOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}:analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.classifyRequest2,\n  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.classifierId],\n  headerParameters: [Parameters.contentType2, Parameters.accept2],\n  mediaType: \"json\",\n  serializer\n};\nconst getClassifyResultOperationSpec: coreClient.OperationSpec = {\n  path: \"/documentClassifiers/{classifierId}/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeResultOperation\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.resultId,\n    Parameters.classifierId\n  ],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst listClassifiersNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GetDocumentClassifiersResponse\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\n"]}