{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/models/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\n\n/**\n * Details about any of several different types of Form Recognizer management operations.\n */\nexport type OperationDetailsUnion =\n  | OperationDetails\n  | DocumentModelBuildOperationDetails\n  | DocumentModelComposeOperationDetails\n  | DocumentModelCopyToOperationDetails\n  | DocumentClassifierBuildOperationDetails;\n\n/** Document analysis parameters. */\nexport interface AnalyzeDocumentRequest {\n  /** Document URL to analyze.  Either urlSource or base64Source must be specified. */\n  urlSource?: string;\n  /** Base64 encoding of the document to analyze.  Either urlSource or base64Source must be specified. */\n  base64Source?: Uint8Array;\n}\n\n/** Error response object. */\nexport interface ErrorResponse {\n  /** Error info. */\n  error: ErrorModel;\n}\n\n/** Error info. */\nexport interface ErrorModel {\n  /** Error code. */\n  code: string;\n  /** Error message. */\n  message: string;\n  /** Target of the error. */\n  target?: string;\n  /** List of detailed errors. */\n  details?: ErrorModel[];\n  /** Detailed error. */\n  innererror?: InnerError;\n}\n\n/** Detailed error. */\nexport interface InnerError {\n  /** Error code. */\n  code: string;\n  /** Error message. */\n  message?: string;\n  /** Detailed error. */\n  innererror?: InnerError;\n}\n\n/** Status and result of the analyze operation. */\nexport interface AnalyzeResultOperation {\n  /** Operation status. */\n  status: AnalyzeResultOperationStatus;\n  /** Date and time (UTC) when the analyze operation was submitted. */\n  createdOn: Date;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedOn: Date;\n  /** Encountered error during document analysis. */\n  error?: ErrorModel;\n  /** Document analysis result. */\n  analyzeResult?: AnalyzeResult;\n}\n\n/** Document analysis result. */\nexport interface AnalyzeResult {\n  /** API version used to produce this result. */\n  apiVersion: string;\n  /** Document model ID used to produce this result. */\n  modelId: string;\n  /** Method used to compute string offset and length. */\n  stringIndexType: StringIndexType;\n  /** Concatenate string representation of all textual and visual elements in reading order. */\n  content: string;\n  /** Analyzed pages. */\n  pages: DocumentPage[];\n  /** Extracted paragraphs. */\n  paragraphs?: DocumentParagraph[];\n  /** Extracted tables. */\n  tables?: DocumentTable[];\n  /** Extracted key-value pairs. */\n  keyValuePairs?: DocumentKeyValuePair[];\n  /** Extracted font styles. */\n  styles?: DocumentStyle[];\n  /** Detected languages. */\n  languages?: DocumentLanguage[];\n  /** Extracted documents. */\n  documents?: Document[];\n}\n\n/** Content and layout elements extracted from a page from the input. */\nexport interface DocumentPage {\n  /** 1-based page number in the input document. */\n  pageNumber: number;\n  /** The general orientation of the content in clockwise direction, measured in degrees between (-180, 180]. */\n  angle?: number;\n  /** The width of the image/PDF in pixels/inches, respectively. */\n  width?: number;\n  /** The height of the image/PDF in pixels/inches, respectively. */\n  height?: number;\n  /** The unit used by the width, height, and polygon properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\". */\n  unit?: LengthUnit;\n  /** Location of the page in the reading order concatenated content. */\n  spans: DocumentSpan[];\n  /** Extracted words from the page. */\n  words?: DocumentWord[];\n  /** Extracted selection marks from the page. */\n  selectionMarks?: DocumentSelectionMark[];\n  /** Extracted lines from the page, potentially containing both textual and visual elements. */\n  lines?: DocumentLine[];\n  /** Extracted barcodes from the page. */\n  barcodes?: DocumentBarcode[];\n  /** Extracted formulas from the page. */\n  formulas?: DocumentFormula[];\n}\n\n/** Contiguous region of the concatenated content property, specified as an offset and length. */\nexport interface DocumentSpan {\n  /** Zero-based index of the content represented by the span. */\n  offset: number;\n  /** Number of characters in the content represented by the span. */\n  length: number;\n}\n\n/** A word object consisting of a contiguous sequence of characters.  For non-space delimited languages, such as Chinese, Japanese, and Korean, each character is represented as its own word. */\nexport interface DocumentWord {\n  /** Text content of the word. */\n  content: string;\n  /** Bounding polygon of the word. */\n  polygon?: number[];\n  /** Location of the word in the reading order concatenated content. */\n  span: DocumentSpan;\n  /** Confidence of correctly extracting the word. */\n  confidence: number;\n}\n\n/** A selection mark object representing check boxes, radio buttons, and other elements indicating a selection. */\nexport interface DocumentSelectionMark {\n  /** State of the selection mark. */\n  state: SelectionMarkState;\n  /** Bounding polygon of the selection mark. */\n  polygon?: number[];\n  /** Location of the selection mark in the reading order concatenated content. */\n  span: DocumentSpan;\n  /** Confidence of correctly extracting the selection mark. */\n  confidence: number;\n}\n\n/** A content line object consisting of an adjacent sequence of content elements, such as words and selection marks. */\nexport interface DocumentLine {\n  /** Concatenated content of the contained elements in reading order. */\n  content: string;\n  /** Bounding polygon of the line. */\n  polygon?: number[];\n  /** Location of the line in the reading order concatenated content. */\n  spans: DocumentSpan[];\n}\n\n/** A barcode object. */\nexport interface DocumentBarcode {\n  /** Barcode kind. */\n  kind: DocumentBarcodeKind;\n  /** Barcode value */\n  value: string;\n  /** Bounding polygon of the barcode. */\n  polygon?: number[];\n  /** Location of the barcode in the reading order concatenated content. */\n  span: DocumentSpan;\n  /** Confidence of correctly extracting the barcode. */\n  confidence: number;\n}\n\n/** A formula object. */\nexport interface DocumentFormula {\n  /** Formula kind. */\n  kind: DocumentFormulaKind;\n  /** LaTex expression describing the formula. */\n  value: string;\n  /** Bounding polygon of the formula. */\n  polygon?: number[];\n  /** Location of the formula in the reading order concatenated content. */\n  span: DocumentSpan;\n  /** Confidence of correctly extracting the formula. */\n  confidence: number;\n}\n\n/** A paragraph object consisting with contiguous lines generally with common alignment and spacing. */\nexport interface DocumentParagraph {\n  /** Semantic role of the paragraph. */\n  role?: ParagraphRole;\n  /** Concatenated content of the paragraph in reading order. */\n  content: string;\n  /** Bounding regions covering the paragraph. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the paragraph in the reading order concatenated content. */\n  spans: DocumentSpan[];\n}\n\n/** Bounding polygon on a specific page of the input. */\nexport interface BoundingRegion {\n  /** 1-based page number of page containing the bounding region. */\n  pageNumber: number;\n  /** Bounding polygon on the page, or the entire page if not specified. */\n  polygon: number[];\n}\n\n/** A table object consisting table cells arranged in a rectangular layout. */\nexport interface DocumentTable {\n  /** Number of rows in the table. */\n  rowCount: number;\n  /** Number of columns in the table. */\n  columnCount: number;\n  /** Cells contained within the table. */\n  cells: DocumentTableCell[];\n  /** Bounding regions covering the table. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the table in the reading order concatenated content. */\n  spans: DocumentSpan[];\n}\n\n/** An object representing the location and content of a table cell. */\nexport interface DocumentTableCell {\n  /** Table cell kind. */\n  kind?: DocumentTableCellKind;\n  /** Row index of the cell. */\n  rowIndex: number;\n  /** Column index of the cell. */\n  columnIndex: number;\n  /** Number of rows spanned by this cell. */\n  rowSpan?: number;\n  /** Number of columns spanned by this cell. */\n  columnSpan?: number;\n  /** Concatenated content of the table cell in reading order. */\n  content: string;\n  /** Bounding regions covering the table cell. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the table cell in the reading order concatenated content. */\n  spans: DocumentSpan[];\n}\n\n/** An object representing a form field with distinct field label (key) and field value (may be empty). */\nexport interface DocumentKeyValuePair {\n  /** Field label of the key-value pair. */\n  key: DocumentKeyValueElement;\n  /** Field value of the key-value pair. */\n  value?: DocumentKeyValueElement;\n  /** Confidence of correctly extracting the key-value pair. */\n  confidence: number;\n}\n\n/** An object representing the field key or value in a key-value pair. */\nexport interface DocumentKeyValueElement {\n  /** Concatenated content of the key-value element in reading order. */\n  content: string;\n  /** Bounding regions covering the key-value element. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the key-value element in the reading order concatenated content. */\n  spans: DocumentSpan[];\n}\n\n/** An object representing observed text styles. */\nexport interface DocumentStyle {\n  /** Is content handwritten? */\n  isHandwritten?: boolean;\n  /** Visually most similar font from among the set of supported font families, with fallback fonts following CSS convention (ex. 'Arial, sans-serif'). */\n  similarFontFamily?: string;\n  /** Font style. */\n  fontStyle?: FontStyle;\n  /** Font weight. */\n  fontWeight?: FontWeight;\n  /** Foreground color in #rrggbb hexadecimal format. */\n  color?: string;\n  /** Background color in #rrggbb hexadecimal format.. */\n  backgroundColor?: string;\n  /** Location of the text elements in the concatenated content the style applies to. */\n  spans: DocumentSpan[];\n  /** Confidence of correctly identifying the style. */\n  confidence: number;\n}\n\n/** An object representing the detected language for a given text span. */\nexport interface DocumentLanguage {\n  /** Detected language.  Value may an ISO 639-1 language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"zh-Hans\"). */\n  locale: string;\n  /** Location of the text elements in the concatenated content the language applies to. */\n  spans: DocumentSpan[];\n  /** Confidence of correctly identifying the language. */\n  confidence: number;\n}\n\n/** An object describing the location and semantic content of a document. */\nexport interface Document {\n  /** Document type. */\n  docType: string;\n  /** Bounding regions covering the document. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the document in the reading order concatenated content. */\n  spans: DocumentSpan[];\n  /** Dictionary of named field values. */\n  fields?: { [propertyName: string]: DocumentField };\n  /** Confidence of correctly extracting the document. */\n  confidence: number;\n}\n\n/** An object representing the content and location of a field value. */\nexport interface DocumentField {\n  /** Data type of the field value. */\n  type: DocumentFieldType;\n  /** String value. */\n  valueString?: string;\n  /** Date value in YYYY-MM-DD format (ISO 8601). */\n  valueDate?: Date;\n  /**\n   * Time value in hh:mm:ss format (ISO 8601).\n   * This value should be an ISO-8601 formatted string representing time. E.g. \"HH:MM:SS\" or \"HH:MM:SS.mm\".\n   */\n  valueTime?: string;\n  /** Phone number value in E.164 format (ex. +19876543210). */\n  valuePhoneNumber?: string;\n  /** Floating point value. */\n  valueNumber?: number;\n  /** Integer value. */\n  valueInteger?: number;\n  /** Selection mark value. */\n  valueSelectionMark?: SelectionMarkState;\n  /** Presence of signature. */\n  valueSignature?: DocumentSignatureType;\n  /** 3-letter country code value (ISO 3166-1 alpha-3). */\n  valueCountryRegion?: string;\n  /** Array of field values. */\n  valueArray?: DocumentField[];\n  /** Dictionary of named field values. */\n  valueObject?: { [propertyName: string]: DocumentField };\n  /** Currency value. */\n  valueCurrency?: CurrencyValue;\n  /** Address value. */\n  valueAddress?: AddressValue;\n  /** Boolean value. */\n  valueBoolean?: boolean;\n  /** Field content. */\n  content?: string;\n  /** Bounding regions covering the field. */\n  boundingRegions?: BoundingRegion[];\n  /** Location of the field in the reading order concatenated content. */\n  spans?: DocumentSpan[];\n  /** Confidence of correctly extracting the field. */\n  confidence?: number;\n}\n\n/** Currency field value. */\nexport interface CurrencyValue {\n  /** Currency amount. */\n  amount: number;\n  /** Currency symbol label, if any. */\n  currencySymbol?: string;\n  /** Resolved currency code (ISO 4217), if any. */\n  currencyCode?: string;\n}\n\n/** Address field value. */\nexport interface AddressValue {\n  /** House or building number. */\n  houseNumber?: string;\n  /** Post office box number. */\n  poBox?: string;\n  /** Street name. */\n  road?: string;\n  /** Name of city, town, village, etc. */\n  city?: string;\n  /** First-level administrative division. */\n  state?: string;\n  /** Postal code used for mail sorting. */\n  postalCode?: string;\n  /** Country/region. */\n  countryRegion?: string;\n  /** Street-level address, excluding city, state, countryRegion, and postalCode. */\n  streetAddress?: string;\n  /** Apartment or office number */\n  unit?: string;\n  /** Districts or boroughs within a city, such as Brooklyn in New York City or City of Westminster in London. */\n  cityDistrict?: string;\n  /** Second-level administrative division used in certain locales. */\n  stateDistrict?: string;\n  /** Unofficial neighborhood name, like Chinatown. */\n  suburb?: string;\n  /** Build name, such as World Trade Center. */\n  house?: string;\n  /** Floor number, such as 3F. */\n  level?: string;\n}\n\n/** Request body to build a new custom document model. */\nexport interface BuildDocumentModelRequest {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** Custom document model build mode. */\n  buildMode: DocumentBuildMode;\n  /** Azure Blob Storage location containing the training data.  Either azureBlobSource or azureBlobFileListSource must be specified. */\n  azureBlobSource?: AzureBlobContentSource;\n  /** Azure Blob Storage file list specifying the training data.  Either azureBlobSource or azureBlobFileListSource must be specified. */\n  azureBlobFileListSource?: AzureBlobFileListContentSource;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Azure Blob Storage content. */\nexport interface AzureBlobContentSource {\n  /** Azure Blob Storage container URL. */\n  containerUrl: string;\n  /** Blob name prefix. */\n  prefix?: string;\n}\n\n/** File list in Azure Blob Storage. */\nexport interface AzureBlobFileListContentSource {\n  /** Azure Blob Storage container URL. */\n  containerUrl: string;\n  /** Path to a JSONL file within the container specifying a subset of documents for training. */\n  fileList: string;\n}\n\n/** Request body to create a composed document model from component document models. */\nexport interface ComposeDocumentModelRequest {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** List of component document models to compose. */\n  componentModels: ComponentDocumentModelDetails[];\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** A component of a composed document model. */\nexport interface ComponentDocumentModelDetails {\n  /** Unique document model name. */\n  modelId: string;\n}\n\n/** Request body to authorize document model copy. */\nexport interface AuthorizeCopyRequest {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Authorization to copy a document model to the specified target resource and modelId. */\nexport interface CopyAuthorization {\n  /** ID of the target Azure resource where the document model should be copied to. */\n  targetResourceId: string;\n  /** Location of the target Azure resource where the document model should be copied to. */\n  targetResourceRegion: string;\n  /** Identifier of the target document model. */\n  targetModelId: string;\n  /** URL of the copied document model in the target account. */\n  targetModelLocation: string;\n  /** Token used to authorize the request. */\n  accessToken: string;\n  /** Date/time when the access token expires. */\n  expirationDateTime: Date;\n}\n\n/** List Operations response object. */\nexport interface GetOperationsResponse {\n  /** List of operations. */\n  value: OperationSummary[];\n  /** Link to the next page of operations. */\n  nextLink?: string;\n}\n\n/** Operation info. */\nexport interface OperationSummary {\n  /** Operation ID */\n  operationId: string;\n  /** Operation status. */\n  status: OperationStatus;\n  /** Operation progress (0-100). */\n  percentCompleted?: number;\n  /** Date and time (UTC) when the operation was created. */\n  createdOn: Date;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedOn: Date;\n  /** Type of operation. */\n  kind: OperationKind;\n  /** URL of the resource targeted by this operation. */\n  resourceLocation: string;\n  /** API version used to create this operation. */\n  apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Get Operation response object. */\nexport interface OperationDetails {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind:\n    | \"documentModelBuild\"\n    | \"documentModelCompose\"\n    | \"documentModelCopyTo\"\n    | \"documentClassifierBuild\";\n  /** Operation ID */\n  operationId: string;\n  /** Operation status. */\n  status: OperationStatus;\n  /** Operation progress (0-100). */\n  percentCompleted?: number;\n  /** Date and time (UTC) when the operation was created. */\n  createdOn: Date;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedOn: Date;\n  /** URL of the resource targeted by this operation. */\n  resourceLocation: string;\n  /** API version used to create this operation. */\n  apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n  /** Encountered error. */\n  error?: ErrorModel;\n}\n\n/** List document models response object. */\nexport interface GetDocumentModelsResponse {\n  /** List of document models. */\n  value: DocumentModelSummary[];\n  /** Link to the next page of document models. */\n  nextLink?: string;\n}\n\n/** Document model summary. */\nexport interface DocumentModelSummary {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** Date and time (UTC) when the document model was created. */\n  createdOn: Date;\n  /** Date and time (UTC) when the document model will expire. */\n  expiresOn?: Date;\n  /** API version used to create this document model. */\n  apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Document model info. */\nexport interface DocumentModelDetails {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** Date and time (UTC) when the document model was created. */\n  createdOn: Date;\n  /** Date and time (UTC) when the document model will expire. */\n  expiresOn?: Date;\n  /** API version used to create this document model. */\n  apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: { [propertyName: string]: string };\n  /** Supported document types. */\n  docTypes?: { [propertyName: string]: DocumentTypeDetails };\n}\n\n/** Document type info. */\nexport interface DocumentTypeDetails {\n  /** Document model description. */\n  description?: string;\n  /** Custom document model build mode. */\n  buildMode?: DocumentBuildMode;\n  /** Description of the document semantic schema using a JSON Schema style syntax. */\n  fieldSchema: { [propertyName: string]: DocumentFieldSchema };\n  /** Estimated confidence for each field. */\n  fieldConfidence?: { [propertyName: string]: number };\n}\n\n/** Description of the field semantic schema using a JSON Schema style syntax. */\nexport interface DocumentFieldSchema {\n  /** Semantic data type of the field value. */\n  type: DocumentFieldType;\n  /** Field description. */\n  description?: string;\n  /** Example field content. */\n  example?: string;\n  /** Field type schema of each array element. */\n  items?: DocumentFieldSchema;\n  /** Named sub-fields of the object field. */\n  properties?: { [propertyName: string]: DocumentFieldSchema };\n}\n\n/** Request body to build a new custom document classifier. */\nexport interface BuildDocumentClassifierRequest {\n  /** Unique document classifier name. */\n  classifierId: string;\n  /** Document classifier description. */\n  description?: string;\n  /** List of document types to classify against. */\n  docTypes: { [propertyName: string]: ClassifierDocumentTypeDetails };\n}\n\n/** Classifier document type info. */\nexport interface ClassifierDocumentTypeDetails {\n  /** Azure Blob Storage location containing the training data for a classifier document type.  Either azureBlobSource or azureBlobFileListSource must be specified. */\n  azureBlobSource?: AzureBlobContentSource;\n  /** Azure Blob Storage file list specifying the training data for a classifier document type.  Either azureBlobSource or azureBlobFileListSource must be specified. */\n  azureBlobFileListSource?: AzureBlobFileListContentSource;\n}\n\n/** List document classifiers response object. */\nexport interface GetDocumentClassifiersResponse {\n  /** List of document classifiers. */\n  value: DocumentClassifierDetails[];\n  /** Link to the next page of document classifiers. */\n  nextLink?: string;\n}\n\n/** Document classifier info. */\nexport interface DocumentClassifierDetails {\n  /** Unique document classifier name. */\n  classifierId: string;\n  /** Document classifier description. */\n  description?: string;\n  /** Date and time (UTC) when the document classifier was created. */\n  createdOn: Date;\n  /** Date and time (UTC) when the document classifier will expire. */\n  expiresOn?: Date;\n  /** API version used to create this document classifier. */\n  apiVersion: string;\n  /** List of document types to classify against. */\n  docTypes: { [propertyName: string]: ClassifierDocumentTypeDetails };\n}\n\n/** Document classification parameters. */\nexport interface ClassifyDocumentRequest {\n  /** Document URL to classify.  Either urlSource or base64Source must be specified. */\n  urlSource?: string;\n  /** Base64 encoding of the document to classify.  Either urlSource or base64Source must be specified. */\n  base64Source?: Uint8Array;\n}\n\n/** General information regarding the current resource. */\nexport interface ResourceDetails {\n  /** Details regarding custom document models. */\n  customDocumentModels: CustomDocumentModelsDetails;\n  /** Quota used, limit, and next reset date/time. */\n  customNeuralDocumentModelBuilds: QuotaDetails;\n}\n\n/** Details regarding custom document models. */\nexport interface CustomDocumentModelsDetails {\n  /** Number of custom document models in the current resource. */\n  count: number;\n  /** Maximum number of custom document models supported in the current resource. */\n  limit: number;\n}\n\n/** Quota used, limit, and next reset date/time. */\nexport interface QuotaDetails {\n  /** Amount of the resource quota used. */\n  used: number;\n  /** Resource quota limit. */\n  quota: number;\n  /** Date/time when the resource quota usage will be reset. */\n  quotaResetOn: Date;\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelBuildOperationDetails extends OperationDetails {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"documentModelBuild\";\n  /** Operation result upon success. */\n  result?: DocumentModelDetails;\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelComposeOperationDetails extends OperationDetails {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"documentModelCompose\";\n  /** Operation result upon success. */\n  result?: DocumentModelDetails;\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelCopyToOperationDetails extends OperationDetails {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"documentModelCopyTo\";\n  /** Operation result upon success. */\n  result?: DocumentModelDetails;\n}\n\n/** Get Operation response object. */\nexport interface DocumentClassifierBuildOperationDetails extends OperationDetails {\n  /** Polymorphic discriminator, which specifies the different types this object can be */\n  kind: \"documentClassifierBuild\";\n  /** Operation result upon success. */\n  result?: DocumentClassifierDetails;\n}\n\n/** Defines headers for DocumentModels_analyzeDocument operation. */\nexport interface DocumentModelsAnalyzeDocumentHeaders {\n  /** URL used to track the progress and obtain the result of the analyze operation. */\n  operationLocation?: string;\n}\n\n/** Defines headers for DocumentModels_buildModel operation. */\nexport interface DocumentModelsBuildModelHeaders {\n  /** Operation result URL. */\n  operationLocation?: string;\n}\n\n/** Defines headers for DocumentModels_composeModel operation. */\nexport interface DocumentModelsComposeModelHeaders {\n  /** Operation result URL. */\n  operationLocation?: string;\n}\n\n/** Defines headers for DocumentModels_copyModelTo operation. */\nexport interface DocumentModelsCopyModelToHeaders {\n  /** Operation result URL. */\n  operationLocation?: string;\n}\n\n/** Defines headers for DocumentClassifiers_buildClassifier operation. */\nexport interface DocumentClassifiersBuildClassifierHeaders {\n  /** Operation result URL. */\n  operationLocation?: string;\n}\n\n/** Defines headers for DocumentClassifiers_classifyDocument operation. */\nexport interface DocumentClassifiersClassifyDocumentHeaders {\n  /** URL used to track the progress and obtain the result of the classification operation. */\n  operationLocation?: string;\n}\n\n/** Known values of {@link StringIndexType} that the service accepts. */\nexport enum KnownStringIndexType {\n  /** User-perceived display character, or grapheme cluster, as defined by Unicode 8.0.0. */\n  TextElements = \"textElements\",\n  /** Character unit represented by a single unicode code point.  Used by Python 3. */\n  UnicodeCodePoint = \"unicodeCodePoint\",\n  /** Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript, Java, and .NET. */\n  Utf16CodeUnit = \"utf16CodeUnit\",\n}\n\n/**\n * Defines values for StringIndexType. \\\n * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **textElements**: User-perceived display character, or grapheme cluster, as defined by Unicode 8.0.0. \\\n * **unicodeCodePoint**: Character unit represented by a single unicode code point.  Used by Python 3. \\\n * **utf16CodeUnit**: Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript, Java, and .NET.\n */\nexport type StringIndexType = string;\n\n/** Known values of {@link DocumentAnalysisFeature} that the service accepts. */\nexport enum KnownDocumentAnalysisFeature {\n  /** Perform OCR at a higher resolution to handle documents with fine print. */\n  OcrHighResolution = \"ocrHighResolution\",\n  /** Enable the detection of the text content language. */\n  Languages = \"languages\",\n  /** Enable the detection of barcodes in the document. */\n  Barcodes = \"barcodes\",\n  /** Enable the detection of mathematical expressions in the document. */\n  Formulas = \"formulas\",\n  /** Enable the detection of general key value pairs (form fields) in the document. */\n  KeyValuePairs = \"keyValuePairs\",\n  /** Enable the recognition of various font styles. */\n  StyleFont = \"styleFont\",\n}\n\n/**\n * Defines values for DocumentAnalysisFeature. \\\n * {@link KnownDocumentAnalysisFeature} can be used interchangeably with DocumentAnalysisFeature,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **ocrHighResolution**: Perform OCR at a higher resolution to handle documents with fine print. \\\n * **languages**: Enable the detection of the text content language. \\\n * **barcodes**: Enable the detection of barcodes in the document. \\\n * **formulas**: Enable the detection of mathematical expressions in the document. \\\n * **keyValuePairs**: Enable the detection of general key value pairs (form fields) in the document. \\\n * **styleFont**: Enable the recognition of various font styles.\n */\nexport type DocumentAnalysisFeature = string;\n\n/** Known values of {@link LengthUnit} that the service accepts. */\nexport enum KnownLengthUnit {\n  /** Length unit for image files. */\n  Pixel = \"pixel\",\n  /** Length unit for PDF files. */\n  Inch = \"inch\",\n}\n\n/**\n * Defines values for LengthUnit. \\\n * {@link KnownLengthUnit} can be used interchangeably with LengthUnit,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **pixel**: Length unit for image files. \\\n * **inch**: Length unit for PDF files.\n */\nexport type LengthUnit = string;\n\n/** Known values of {@link SelectionMarkState} that the service accepts. */\nexport enum KnownSelectionMarkState {\n  /** The selection mark is selected, often indicated by a check ✓ or cross X inside the selection mark. */\n  Selected = \"selected\",\n  /** The selection mark is not selected. */\n  Unselected = \"unselected\",\n}\n\n/**\n * Defines values for SelectionMarkState. \\\n * {@link KnownSelectionMarkState} can be used interchangeably with SelectionMarkState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **selected**: The selection mark is selected, often indicated by a check ✓ or cross X inside the selection mark. \\\n * **unselected**: The selection mark is not selected.\n */\nexport type SelectionMarkState = string;\n\n/** Known values of {@link DocumentBarcodeKind} that the service accepts. */\nexport enum KnownDocumentBarcodeKind {\n  /** QR code, as defined in ISO/IEC 18004:2015. */\n  QRCode = \"QRCode\",\n  /** PDF417, as defined in ISO 15438. */\n  PDF417 = \"PDF417\",\n  /** GS1 12-digit Universal Product Code. */\n  Upca = \"UPCA\",\n  /** GS1 6-digit Universal Product Code. */\n  Upce = \"UPCE\",\n  /** Code 39 barcode, as defined in ISO/IEC 16388:2007. */\n  Code39 = \"Code39\",\n  /** Code 128 barcode, as defined in ISO/IEC 15417:2007. */\n  Code128 = \"Code128\",\n  /** GS1 8-digit International Article Number (European Article Number). */\n  EAN8 = \"EAN8\",\n  /** GS1 13-digit International Article Number (European Article Number). */\n  EAN13 = \"EAN13\",\n  /** GS1 DataBar barcode. */\n  DataBar = \"DataBar\",\n  /** Code 93 barcode, as defined in ANSI/AIM BC5-1995. */\n  Code93 = \"Code93\",\n  /** Codabar barcode, as defined in ANSI/AIM BC3-1995. */\n  Codabar = \"Codabar\",\n  /** GS1 DataBar Expanded barcode. */\n  DataBarExpanded = \"DataBarExpanded\",\n  /** Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995. */\n  ITF = \"ITF\",\n  /** Micro QR code, as defined in ISO/IEC 23941:2022. */\n  MicroQRCode = \"MicroQRCode\",\n  /** Aztec code, as defined in ISO/IEC 24778:2008. */\n  Aztec = \"Aztec\",\n  /** Data matrix code, as defined in ISO/IEC 16022:2006. */\n  DataMatrix = \"DataMatrix\",\n  /** MaxiCode, as defined in ISO/IEC 16023:2000. */\n  MaxiCode = \"MaxiCode\",\n}\n\n/**\n * Defines values for DocumentBarcodeKind. \\\n * {@link KnownDocumentBarcodeKind} can be used interchangeably with DocumentBarcodeKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **QRCode**: QR code, as defined in ISO\\/IEC 18004:2015. \\\n * **PDF417**: PDF417, as defined in ISO 15438. \\\n * **UPCA**: GS1 12-digit Universal Product Code. \\\n * **UPCE**: GS1 6-digit Universal Product Code. \\\n * **Code39**: Code 39 barcode, as defined in ISO\\/IEC 16388:2007. \\\n * **Code128**: Code 128 barcode, as defined in ISO\\/IEC 15417:2007. \\\n * **EAN8**: GS1 8-digit International Article Number (European Article Number). \\\n * **EAN13**: GS1 13-digit International Article Number (European Article Number). \\\n * **DataBar**: GS1 DataBar barcode. \\\n * **Code93**: Code 93 barcode, as defined in ANSI\\/AIM BC5-1995. \\\n * **Codabar**: Codabar barcode, as defined in ANSI\\/AIM BC3-1995. \\\n * **DataBarExpanded**: GS1 DataBar Expanded barcode. \\\n * **ITF**: Interleaved 2 of 5 barcode, as defined in ANSI\\/AIM BC2-1995. \\\n * **MicroQRCode**: Micro QR code, as defined in ISO\\/IEC 23941:2022. \\\n * **Aztec**: Aztec code, as defined in ISO\\/IEC 24778:2008. \\\n * **DataMatrix**: Data matrix code, as defined in ISO\\/IEC 16022:2006. \\\n * **MaxiCode**: MaxiCode, as defined in ISO\\/IEC 16023:2000.\n */\nexport type DocumentBarcodeKind = string;\n\n/** Known values of {@link DocumentFormulaKind} that the service accepts. */\nexport enum KnownDocumentFormulaKind {\n  /** A formula embedded within the content of a paragraph. */\n  Inline = \"inline\",\n  /** A formula in display mode that takes up an entire line. */\n  Display = \"display\",\n}\n\n/**\n * Defines values for DocumentFormulaKind. \\\n * {@link KnownDocumentFormulaKind} can be used interchangeably with DocumentFormulaKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **inline**: A formula embedded within the content of a paragraph. \\\n * **display**: A formula in display mode that takes up an entire line.\n */\nexport type DocumentFormulaKind = string;\n\n/** Known values of {@link ParagraphRole} that the service accepts. */\nexport enum KnownParagraphRole {\n  /** Text near the top edge of the page. */\n  PageHeader = \"pageHeader\",\n  /** Text near the bottom edge of the page. */\n  PageFooter = \"pageFooter\",\n  /** Page number. */\n  PageNumber = \"pageNumber\",\n  /** Top-level title describing the entire document. */\n  Title = \"title\",\n  /** Sub heading describing a section of the document. */\n  SectionHeading = \"sectionHeading\",\n  /** A note usually placed after the main content on a page. */\n  Footnote = \"footnote\",\n  /** A block of formulas, often with shared alignment. */\n  FormulaBlock = \"formulaBlock\",\n}\n\n/**\n * Defines values for ParagraphRole. \\\n * {@link KnownParagraphRole} can be used interchangeably with ParagraphRole,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **pageHeader**: Text near the top edge of the page. \\\n * **pageFooter**: Text near the bottom edge of the page. \\\n * **pageNumber**: Page number. \\\n * **title**: Top-level title describing the entire document. \\\n * **sectionHeading**: Sub heading describing a section of the document. \\\n * **footnote**: A note usually placed after the main content on a page. \\\n * **formulaBlock**: A block of formulas, often with shared alignment.\n */\nexport type ParagraphRole = string;\n\n/** Known values of {@link DocumentTableCellKind} that the service accepts. */\nexport enum KnownDocumentTableCellKind {\n  /** Contains the main content/data. */\n  Content = \"content\",\n  /** Describes the content of the row. */\n  RowHeader = \"rowHeader\",\n  /** Describes the content of the column. */\n  ColumnHeader = \"columnHeader\",\n  /** Describes the row headers, usually located at the top left corner of a table. */\n  StubHead = \"stubHead\",\n  /** Describes the content in (parts of) the table. */\n  Description = \"description\",\n}\n\n/**\n * Defines values for DocumentTableCellKind. \\\n * {@link KnownDocumentTableCellKind} can be used interchangeably with DocumentTableCellKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **content**: Contains the main content\\/data. \\\n * **rowHeader**: Describes the content of the row. \\\n * **columnHeader**: Describes the content of the column. \\\n * **stubHead**: Describes the row headers, usually located at the top left corner of a table. \\\n * **description**: Describes the content in (parts of) the table.\n */\nexport type DocumentTableCellKind = string;\n\n/** Known values of {@link FontStyle} that the service accepts. */\nexport enum KnownFontStyle {\n  /** Characters are represented normally. */\n  Normal = \"normal\",\n  /** Characters are visually slanted to the right. */\n  Italic = \"italic\",\n}\n\n/**\n * Defines values for FontStyle. \\\n * {@link KnownFontStyle} can be used interchangeably with FontStyle,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **normal**: Characters are represented normally. \\\n * **italic**: Characters are visually slanted to the right.\n */\nexport type FontStyle = string;\n\n/** Known values of {@link FontWeight} that the service accepts. */\nexport enum KnownFontWeight {\n  /** Characters are represented normally. */\n  Normal = \"normal\",\n  /** Characters are represented with thicker strokes. */\n  Bold = \"bold\",\n}\n\n/**\n * Defines values for FontWeight. \\\n * {@link KnownFontWeight} can be used interchangeably with FontWeight,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **normal**: Characters are represented normally. \\\n * **bold**: Characters are represented with thicker strokes.\n */\nexport type FontWeight = string;\n\n/** Known values of {@link DocumentFieldType} that the service accepts. */\nexport enum KnownDocumentFieldType {\n  /** Plain text. */\n  String = \"string\",\n  /** Date, normalized to ISO 8601 (YYYY-MM-DD) format. */\n  Date = \"date\",\n  /** Time, normalized to ISO 8601 (hh:mm:ss) format. */\n  Time = \"time\",\n  /** Phone number, normalized to E.164 (+{CountryCode}{SubscriberNumber}) format. */\n  PhoneNumber = \"phoneNumber\",\n  /** Floating point number, normalized to double precision floating point. */\n  Number = \"number\",\n  /** Integer number, normalized to 64-bit signed integer. */\n  Integer = \"integer\",\n  /** Is field selected? */\n  SelectionMark = \"selectionMark\",\n  /** Country/region, normalized to ISO 3166-1 alpha-3 format (ex. USA). */\n  CountryRegion = \"countryRegion\",\n  /** Is signature present? */\n  Signature = \"signature\",\n  /** List of subfields of the same type. */\n  Array = \"array\",\n  /** Named list of subfields of potentially different types. */\n  Object = \"object\",\n  /** Currency amount with optional currency symbol and unit. */\n  Currency = \"currency\",\n  /** Parsed address. */\n  Address = \"address\",\n  /** Boolean value, normalized to true or false. */\n  Boolean = \"boolean\",\n}\n\n/**\n * Defines values for DocumentFieldType. \\\n * {@link KnownDocumentFieldType} can be used interchangeably with DocumentFieldType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **string**: Plain text. \\\n * **date**: Date, normalized to ISO 8601 (YYYY-MM-DD) format. \\\n * **time**: Time, normalized to ISO 8601 (hh:mm:ss) format. \\\n * **phoneNumber**: Phone number, normalized to E.164 (+{CountryCode}{SubscriberNumber}) format. \\\n * **number**: Floating point number, normalized to double precision floating point. \\\n * **integer**: Integer number, normalized to 64-bit signed integer. \\\n * **selectionMark**: Is field selected? \\\n * **countryRegion**: Country\\/region, normalized to ISO 3166-1 alpha-3 format (ex. USA). \\\n * **signature**: Is signature present? \\\n * **array**: List of subfields of the same type. \\\n * **object**: Named list of subfields of potentially different types. \\\n * **currency**: Currency amount with optional currency symbol and unit. \\\n * **address**: Parsed address. \\\n * **boolean**: Boolean value, normalized to true or false.\n */\nexport type DocumentFieldType = string;\n\n/** Known values of {@link DocumentSignatureType} that the service accepts. */\nexport enum KnownDocumentSignatureType {\n  /** A signature is detected. */\n  Signed = \"signed\",\n  /** No signatures are detected. */\n  Unsigned = \"unsigned\",\n}\n\n/**\n * Defines values for DocumentSignatureType. \\\n * {@link KnownDocumentSignatureType} can be used interchangeably with DocumentSignatureType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **signed**: A signature is detected. \\\n * **unsigned**: No signatures are detected.\n */\nexport type DocumentSignatureType = string;\n\n/** Known values of {@link DocumentBuildMode} that the service accepts. */\nexport enum KnownDocumentBuildMode {\n  /** Target documents with similar visual templates. */\n  Template = \"template\",\n  /** Support documents with diverse visual templates. */\n  Neural = \"neural\",\n}\n\n/**\n * Defines values for DocumentBuildMode. \\\n * {@link KnownDocumentBuildMode} can be used interchangeably with DocumentBuildMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **template**: Target documents with similar visual templates. \\\n * **neural**: Support documents with diverse visual templates.\n */\nexport type DocumentBuildMode = string;\n\n/** Known values of {@link OperationKind} that the service accepts. */\nexport enum KnownOperationKind {\n  /** Build a new custom document model. */\n  DocumentModelBuild = \"documentModelBuild\",\n  /** Compose a new custom document model from existing models. */\n  DocumentModelCompose = \"documentModelCompose\",\n  /** Copy an existing document model to potentially a different resource, region, or subscription. */\n  DocumentModelCopyTo = \"documentModelCopyTo\",\n  /** Build a new custom classifier model. */\n  DocumentClassifierBuild = \"documentClassifierBuild\",\n}\n\n/**\n * Defines values for OperationKind. \\\n * {@link KnownOperationKind} can be used interchangeably with OperationKind,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **documentModelBuild**: Build a new custom document model. \\\n * **documentModelCompose**: Compose a new custom document model from existing models. \\\n * **documentModelCopyTo**: Copy an existing document model to potentially a different resource, region, or subscription. \\\n * **documentClassifierBuild**: Build a new custom classifier model.\n */\nexport type OperationKind = string;\n/** Defines values for ContentType. */\nexport type ContentType =\n  | \"application/octet-stream\"\n  | \"application/pdf\"\n  | \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"\n  | \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n  | \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n  | \"image/bmp\"\n  | \"image/heif\"\n  | \"image/jpeg\"\n  | \"image/png\"\n  | \"image/tiff\";\n/** Defines values for AnalyzeResultOperationStatus. */\nexport type AnalyzeResultOperationStatus = \"notStarted\" | \"running\" | \"failed\" | \"succeeded\";\n/** Defines values for OperationStatus. */\nexport type OperationStatus = \"notStarted\" | \"running\" | \"failed\" | \"succeeded\" | \"canceled\";\n\n/** Optional parameters. */\nexport interface DocumentModelsAnalyzeDocument$binaryOptionalParams\n  extends coreClient.OperationOptions {\n  /** Analyze request parameters. */\n  analyzeRequest?: coreRestPipeline.RequestBodyType;\n  /** List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\" */\n  pages?: string;\n  /** Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\"). */\n  locale?: string;\n  /** List of optional analysis features. */\n  features?: DocumentAnalysisFeature[];\n}\n\n/** Optional parameters. */\nexport interface DocumentModelsAnalyzeDocument$textOptionalParams\n  extends coreClient.OperationOptions {\n  /** Analyze request parameters. */\n  analyzeRequest?: string;\n  /** List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\" */\n  pages?: string;\n  /** Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\"). */\n  locale?: string;\n  /** List of optional analysis features. */\n  features?: DocumentAnalysisFeature[];\n}\n\n/** Optional parameters. */\nexport interface DocumentModelsAnalyzeDocument$jsonOptionalParams\n  extends coreClient.OperationOptions {\n  /** Analyze request parameters. */\n  analyzeRequest?: AnalyzeDocumentRequest;\n  /** List of 1-based page numbers to analyze.  Ex. \"1-3,5,7-9\" */\n  pages?: string;\n  /** Locale hint for text recognition and document analysis.  Value may contain only the language code (ex. \"en\", \"fr\") or BCP 47 language tag (ex. \"en-US\"). */\n  locale?: string;\n  /** List of optional analysis features. */\n  features?: DocumentAnalysisFeature[];\n}\n\n/** Contains response data for the analyzeDocument operation. */\nexport type DocumentModelsAnalyzeDocumentResponse = DocumentModelsAnalyzeDocumentHeaders;\n\n/** Optional parameters. */\nexport interface DocumentModelsGetAnalyzeResultOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getAnalyzeResult operation. */\nexport type DocumentModelsGetAnalyzeResultResponse = AnalyzeResultOperation;\n\n/** Optional parameters. */\nexport interface DocumentModelsBuildModelOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the buildModel operation. */\nexport type DocumentModelsBuildModelResponse = DocumentModelsBuildModelHeaders;\n\n/** Optional parameters. */\nexport interface DocumentModelsComposeModelOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the composeModel operation. */\nexport type DocumentModelsComposeModelResponse = DocumentModelsComposeModelHeaders;\n\n/** Optional parameters. */\nexport interface DocumentModelsAuthorizeModelCopyOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the authorizeModelCopy operation. */\nexport type DocumentModelsAuthorizeModelCopyResponse = CopyAuthorization;\n\n/** Optional parameters. */\nexport interface DocumentModelsCopyModelToOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the copyModelTo operation. */\nexport type DocumentModelsCopyModelToResponse = DocumentModelsCopyModelToHeaders;\n\n/** Optional parameters. */\nexport interface DocumentModelsListModelsOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the listModels operation. */\nexport type DocumentModelsListModelsResponse = GetDocumentModelsResponse;\n\n/** Optional parameters. */\nexport interface DocumentModelsGetModelOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getModel operation. */\nexport type DocumentModelsGetModelResponse = DocumentModelDetails;\n\n/** Optional parameters. */\nexport interface DocumentModelsDeleteModelOptionalParams extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface DocumentModelsListModelsNextOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the listModelsNext operation. */\nexport type DocumentModelsListModelsNextResponse = GetDocumentModelsResponse;\n\n/** Optional parameters. */\nexport interface MiscellaneousListOperationsOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the listOperations operation. */\nexport type MiscellaneousListOperationsResponse = GetOperationsResponse;\n\n/** Optional parameters. */\nexport interface MiscellaneousGetOperationOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getOperation operation. */\nexport type MiscellaneousGetOperationResponse = OperationDetailsUnion;\n\n/** Optional parameters. */\nexport interface MiscellaneousGetResourceInfoOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getResourceInfo operation. */\nexport type MiscellaneousGetResourceInfoResponse = ResourceDetails;\n\n/** Optional parameters. */\nexport interface MiscellaneousListOperationsNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listOperationsNext operation. */\nexport type MiscellaneousListOperationsNextResponse = GetOperationsResponse;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersBuildClassifierOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the buildClassifier operation. */\nexport type DocumentClassifiersBuildClassifierResponse = DocumentClassifiersBuildClassifierHeaders;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersListClassifiersOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listClassifiers operation. */\nexport type DocumentClassifiersListClassifiersResponse = GetDocumentClassifiersResponse;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersGetClassifierOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getClassifier operation. */\nexport type DocumentClassifiersGetClassifierResponse = DocumentClassifierDetails;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersDeleteClassifierOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface DocumentClassifiersClassifyDocument$binaryOptionalParams\n  extends coreClient.OperationOptions {\n  /** Classify request parameters. */\n  classifyRequest?: coreRestPipeline.RequestBodyType;\n}\n\n/** Optional parameters. */\nexport interface DocumentClassifiersClassifyDocument$textOptionalParams\n  extends coreClient.OperationOptions {\n  /** Classify request parameters. */\n  classifyRequest?: string;\n}\n\n/** Optional parameters. */\nexport interface DocumentClassifiersClassifyDocument$jsonOptionalParams\n  extends coreClient.OperationOptions {\n  /** Classify request parameters. */\n  classifyRequest?: ClassifyDocumentRequest;\n}\n\n/** Contains response data for the classifyDocument operation. */\nexport type DocumentClassifiersClassifyDocumentResponse =\n  DocumentClassifiersClassifyDocumentHeaders;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersGetClassifyResultOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getClassifyResult operation. */\nexport type DocumentClassifiersGetClassifyResultResponse = AnalyzeResultOperation;\n\n/** Optional parameters. */\nexport interface DocumentClassifiersListClassifiersNextOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the listClassifiersNext operation. */\nexport type DocumentClassifiersListClassifiersNextResponse = GetDocumentClassifiersResponse;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams extends coreClient.ServiceClientOptions {\n  /** Method used to compute string offset and length. */\n  stringIndexType?: StringIndexType;\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}