{"version":3,"file":"fields.js","sourceRoot":"","sources":["../../../src/models/fields.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AASlC,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;AAkOxC;;;;;GAKG;AACH,MAAM,UAAU,qCAAqC,CAAC,MAErD;IACC,OAAO,MAAM,CAAC,OAAO,CAAC,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,EAAE,CAAC,CAAC,MAAM,CACxC,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,EAAE;QACnC,iBAAiB,CAAC,IAAI,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,OAAO,iBAAiB,CAAC;IAC3B,CAAC,EACD,EAAoC,CACrC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,KAA6B;IAC3D,MAAM,IAAI,GAAG,KAAK,CAAC,IAA6B,CAAC;IAEjD,MAAM,KAAK,GAA4D,CAAC,GAAG,EAAE;;QAC3E,QAAQ,IAAI,EAAE,CAAC;YACb,oEAAoE;YACpE,KAAK,QAAQ,CAAC;YACd,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,aAAa,CAAC;YACnB,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,eAAe,CAAC;YACrB,KAAK,eAAe,CAAC;YACrB,KAAK,WAAW,CAAC;YACjB,KAAK,UAAU,CAAC;YAChB,KAAK,SAAS;gBACZ,OAAO;oBACL,KAAK,EACH,KAAK,CACH,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAG1B,CACF;iBACJ,CAAC;YACJ,KAAK,OAAO;gBACV,OAAO,EAAE,MAAM,EAAE,MAAA,KAAK,CAAC,UAAU,0CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,WAAC,OAAA,MAAA,eAAe,CAAC,CAAC,CAAC,mCAAI,EAAE,CAAA,EAAA,CAAC,EAAE,CAAC;YAC5E,KAAK,QAAQ;gBACX,OAAO,EAAE,UAAU,EAAE,qCAAqC,CAAC,MAAA,KAAK,CAAC,WAAW,mCAAI,EAAE,CAAC,EAAE,CAAC;YACxF;gBACE,uBAAuB;gBACvB,gDAAgD;gBAChD,MAAM,SAAS,GAAU,IAAI,CAAC;gBAC9B,MAAM,IAAI,KAAK,CAAC,oCAAoC,SAAS,EAAE,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAC,EAAE,CAAC;IAEL,OAAO,8BACL,IAAI,IACD,KAAK,KACR,eAAe,EAAE,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,EACzD,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,UAAU,EAAE,KAAK,CAAC,UAAU,GACZ,CAAC;AACrB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { DocumentSpan } from \"../index.js\";\n\nimport type {\n  AddressValue,\n  CurrencyValue,\n  DocumentField as GeneratedDocumentField,\n} from \"../generated/index.js\";\nimport { toBoundingRegions } from \"../transforms/polygon.js\";\nimport { capitalize } from \"../util.js\";\nimport type { BoundingRegion } from \"./documentElements.js\";\n\n/**\n * Fields that are common to all DocumentField variants.\n */\nexport interface DocumentFieldCommon {\n  /**\n   * The verbatim extracted text content of the field.\n   */\n  content?: string;\n\n  /**\n   * Bounding regions covering the field.\n   */\n  boundingRegions?: BoundingRegion[];\n\n  /**\n   * Confidence of correctly extracting the field.\n   */\n  confidence?: number;\n\n  /**\n   * Location of the field in the reading order concatenated content.\n   */\n  spans?: DocumentSpan[];\n}\n\n/**\n * A simple field that has a primitive value, such as a string, number etc.\n */\nexport interface DocumentValueField<T> extends DocumentFieldCommon {\n  /**\n   * The field's value, which has the type specified in the field's schema.\n   */\n  value?: T;\n}\n\n/**\n * An extracted field. The `kind` property identifies (discriminates) the type of the `DocumentField`.\n */\nexport type DocumentField =\n  | DocumentStringField\n  | DocumentDateField\n  | DocumentTimeField\n  | DocumentPhoneNumberField\n  | DocumentNumberField\n  | DocumentIntegerField\n  | DocumentBooleanField\n  | DocumentSelectionMarkField\n  | DocumentCountryRegionField\n  | DocumentSignatureField\n  | DocumentCurrencyField\n  | DocumentAddressField\n  | DocumentArrayField\n  | DocumentObjectField;\n\n/**\n * A DocumentField that has a string value.\n */\nexport interface DocumentStringField<Value extends string = string>\n  extends DocumentValueField<Value> {\n  /** Field kind: \"string\". */\n  kind: \"string\";\n}\n\n/**\n * A DocumentField that has a Date value.\n */\nexport interface DocumentDateField extends DocumentValueField<Date> {\n  /** Field kind: \"date\". */\n  kind: \"date\";\n}\n\n/**\n * A DocumentField that has a time value, represented as a string.\n */\nexport interface DocumentTimeField extends DocumentFieldCommon {\n  /** Field kind: \"time\". */\n  kind: \"time\";\n  /**\n   * The field's value, which is a time in \"HH:MM:SS\" (ISO 8601) format.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a phone number value, represented as a string.\n */\nexport interface DocumentPhoneNumberField extends DocumentFieldCommon {\n  /** Field kind: \"phoneNumber\". */\n  kind: \"phoneNumber\";\n  /**\n   * The field's value, which is a string containing the phone number.\n   *\n   * The phone number value is normalized to a standard format. If the value could not be normalized, this value may be\n   * undefined, and the `content` property will contain the verbatim text of the DocumentField as it appeared in the\n   * input.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a number value.\n */\nexport interface DocumentNumberField extends DocumentValueField<number> {\n  /** Field kind: \"number\". */\n  kind: \"number\";\n}\n\n/**\n * A DocumentField that has an integer value.\n */\nexport interface DocumentIntegerField extends DocumentValueField<number> {\n  /** Field kind: \"integer\". */\n  kind: \"integer\";\n}\n\n/**\n * A DocumentField that is has a value indicating a selection mark state (such as a checkbox or radio button),\n * represented as a string.\n */\nexport interface DocumentSelectionMarkField extends DocumentFieldCommon {\n  /** Field kind: \"selectionMark\". */\n  kind: \"selectionMark\";\n  /**\n   * The state of the selection mark. One of:\n   *\n   * - \"selected\"\n   * - \"unselected\"\n   *\n   * This value may be undefined, and other variants may be introduced in the future.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that has a value indicating a country or region, represented as a string.\n */\nexport interface DocumentCountryRegionField extends DocumentFieldCommon {\n  /** Field kind: \"countryRegion\". */\n  kind: \"countryRegion\";\n  /**\n   * The 3-letter country/region code (ISO 3166-1 alpha-3) of the extracted country or region.\n   */\n  value?: string;\n}\n\n/**\n * A DocumentField that indicates the state of a signature, represented as a string.\n */\nexport interface DocumentSignatureField extends DocumentFieldCommon {\n  /** Field kind: \"signature\". */\n  kind: \"signature\";\n  /**\n   * The state of the signature field. One of:\n   *\n   * - \"unsigned\"\n   * - \"signed\"\n   *\n   * This value may be undefined, and other variants may be introduced in the future.\n   */\n  value: \"signed\" | \"unsigned\";\n}\n\n/**\n * A DocumentField that consists of an array of nested fields. All fields in the array will have the same type.\n */\nexport interface DocumentArrayField<T = DocumentField> extends DocumentFieldCommon {\n  /** Field kind: \"array\". */\n  kind: \"array\";\n\n  /**\n   * The extracted members of the array field.\n   */\n  values: T[];\n}\n\n/**\n * A DocumentField that describes an amount of a certain currency.\n */\nexport interface DocumentCurrencyField extends DocumentFieldCommon {\n  /** Field kind: \"currency\". */\n  kind: \"currency\";\n\n  /**\n   * The properties of the extracted currency.\n   */\n  value?: CurrencyValue;\n}\n\n/**\n * A document field that describes a structured physical address.\n */\nexport interface DocumentAddressField extends DocumentFieldCommon {\n  /** Field kind: \"address\". */\n  kind: \"address\";\n\n  /**\n   * The properties of the extracted address.\n   */\n  value?: AddressValue;\n}\n\n/**\n * A DocumentField that has a boolean value.\n */\nexport interface DocumentBooleanField extends DocumentValueField<boolean> {\n  /** Field kind: \"boolean\". */\n  kind: \"boolean\";\n}\n\n/**\n * A DocumentField that consists of several named properties that have their own DocumentField values.\n */\nexport interface DocumentObjectField<Properties = { [k: string]: DocumentField | undefined }>\n  extends DocumentFieldCommon {\n  /** Field kind: \"object\". */\n  kind: \"object\";\n\n  /**\n   * The extracted object properties. Each property of this object is, itself, a nested DocumentField.\n   */\n  properties: Properties;\n}\n\n/**\n * Convert a record of generated fields to a record of strongly-typed fields.\n * @internal\n * @param fields - a map of field names to generated field values\n * @returns - an object with the same keys, where all values have been mapped to DocumentFields\n */\nexport function toAnalyzedDocumentFieldsFromGenerated(fields: {\n  [k: string]: GeneratedDocumentField;\n}): { [k: string]: DocumentField } {\n  return Object.entries(fields ?? {}).reduce(\n    (transformedFields, [name, value]) => {\n      transformedFields[name] = toDocumentField(value);\n      return transformedFields;\n    },\n    {} as { [k: string]: DocumentField },\n  );\n}\n\n/**\n * Convert a generated document field into a strong TypeScriptified document field.\n * @internal\n */\nexport function toDocumentField(field: GeneratedDocumentField): DocumentField {\n  const kind = field.type as DocumentField[\"kind\"];\n\n  const value: Omit<DocumentField, keyof DocumentFieldCommon | \"kind\"> = (() => {\n    switch (kind) {\n      // Almost all value kinds are represented as simple elemental values\n      case \"string\":\n      case \"date\":\n      case \"time\":\n      case \"phoneNumber\":\n      case \"number\":\n      case \"boolean\":\n      case \"integer\":\n      case \"selectionMark\":\n      case \"countryRegion\":\n      case \"signature\":\n      case \"currency\":\n      case \"address\":\n        return {\n          value:\n            field[\n              (\"value\" + capitalize(kind)) as Extract<\n                keyof GeneratedDocumentField,\n                `value${string}`\n              >\n            ],\n        };\n      case \"array\":\n        return { values: field.valueArray?.map((v) => toDocumentField(v) ?? []) };\n      case \"object\":\n        return { properties: toAnalyzedDocumentFieldsFromGenerated(field.valueObject ?? {}) };\n      default:\n        // Exhaustiveness check\n        // eslint-disable-next-line no-case-declarations\n        const __exhaust: never = kind;\n        throw new Error(`Unrecognized DocumentField type: ${__exhaust}`);\n    }\n  })();\n\n  return {\n    kind,\n    ...value,\n    boundingRegions: toBoundingRegions(field.boundingRegions),\n    content: field.content,\n    spans: field.spans,\n    confidence: field.confidence,\n  } as DocumentField;\n}\n"]}