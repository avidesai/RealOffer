import type { AbortSignalLike } from "@azure/abort-controller";
/**
 * A PromiseLike object that supports cancellation.
 * @internal
 */
export interface CancelablePromiseLike<T> extends PromiseLike<T> {
    /**
     * Cancel the promise (cause it to reject).
     */
    cancel(): void;
}
/**
 * A promise that delays resolution until a certain amount of time (in milliseconds) has passed, with facilities for
 * robust cancellation.
 *
 * ### Example:
 *
 * ```ts snippet:ignore
 * let toCancel;
 *
 * // Wait 20 seconds, and optionally allow the function to be cancelled.
 * await delayMs(20000, (cancel) => { toCancel = cancel });
 *
 * // ... if `toCancel` is called before the 20 second timer expires, then the delayMs promise will reject.
 * ```
 *
 * @internal
 * @param ms - the number of milliseconds to wait before resolving
 * @param cb - a callback that can provide the caller with a cancellation function
 */
export declare function delayMs(ms: number, abortSignal: AbortSignalLike | undefined): CancelablePromiseLike<void>;
//# sourceMappingURL=delayMs.d.ts.map