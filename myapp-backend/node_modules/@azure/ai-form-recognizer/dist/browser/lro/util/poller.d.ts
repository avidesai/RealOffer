import type { PollOperationState, PollerLike } from "@azure/core-lro";
import type { AbortSignalLike } from "@azure/abort-controller";
/**
 * Information about the Long-Running Operation (LRO) that is being performed.
 */
export interface OperationContext {
    /**
     * An AbortSignal that can be used to cancel the operation.
     */
    abortSignal?: AbortSignalLike;
    /**
     * Sets the server's preferred polling interval in milliseconds. To clear the server's preferred polling interval,
     * pass `undefined`.
     */
    updateDelay: (interval: number | undefined) => void;
}
/**
 * A specification for a long-running operation, which defines the poller flow.
 * @internal
 */
export interface OperationSpec<TState extends PollOperationState<unknown>> {
    /**
     * A function that produces the first operation state for this LRO.
     */
    init: (ctx: OperationContext) => Promise<TState>;
    /**
     * A function that consumes the existing state of the poller and produces the next state.
     */
    poll: (ctx: OperationContext, state: TState) => Promise<TState>;
    /**
     * A function that serializes the state into a string.
     */
    serialize: (state: TState) => string;
}
/**
 * Uniform poller implementation, creates a poller based on a PollerSpec.
 *
 * @internal
 */
export declare function lro<TResult, TState extends PollOperationState<TResult>>(spec: OperationSpec<TState>, pollingInterval: number | undefined, initAbortSignal: AbortSignalLike | undefined): Promise<PollerLike<TState, TResult>>;
//# sourceMappingURL=poller.d.ts.map