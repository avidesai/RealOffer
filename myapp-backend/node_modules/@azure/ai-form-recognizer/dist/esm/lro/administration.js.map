{"version":3,"file":"administration.js","sourceRoot":"","sources":["../../../src/lro/administration.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AA2FlD;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,QAA6C;;IAE7C,OAAO;QACL,WAAW,EAAE,QAAQ,CAAC,WAAW;QACjC,MAAM,EAAE,QAAQ,CAAC,MAAM;QACvB,UAAU,EAAE,QAAQ,CAAC,UAAU;QAC/B,gBAAgB,EAAE,MAAA,QAAQ,CAAC,gBAAgB,mCAAI,CAAC;QAChD,aAAa,EAAE,QAAQ,CAAC,aAAa;QACrC,SAAS,EAAE,QAAQ,CAAC,SAAS;QAC7B,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,IAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC;QAChE,WAAW,EAAE,QAAQ,CAAC,MAAM,KAAK,UAAU;QAC3C,WAAW,EAAE,QAAQ,CAAC,MAAM,KAAK,WAAW;QAC5C,SAAS,EAAE,QAAQ,CAAC,MAAM,KAAK,YAAY;QAC3C,IAAI,EAAE,QAAQ,CAAC,IAAI;QAEnB,oFAAoF;QACpF,wGAAwG;QACxG,mHAAmH;QACnH,gEAAgE;QAChE,MAAM,EAAE,QAAQ,CAAC,MAAM;KAC0C,CAAC;AACtE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport type { OperationOptions } from \"@azure/core-client\";\nimport { FormRecognizerError } from \"../error.js\";\nimport type {\n  DocumentModelDetails,\n  OperationStatus,\n  DocumentModelBuildOperationDetails,\n  DocumentModelCopyToOperationDetails,\n  DocumentModelComposeOperationDetails,\n  DocumentClassifierDetails,\n  DocumentClassifierBuildOperationDetails,\n} from \"../generated/index.js\";\nimport type { PollerOptions } from \"../options/PollerOptions.js\";\nimport type { OperationContext } from \"./util/poller.js\";\n\n/**\n * The possible types of all administration operation states.\n * @internal\n */\nexport type AdministrationOperationState =\n  | DocumentModelOperationState\n  | DocumentClassifierOperationState;\n\n/**\n * The set of fields common to all administration operations.\n */\nexport interface ModelAdministrationOperationStateCommon {\n  /**\n   * The status of the operation. One of:\n   *\n   * - \"notStarted\"\n   * - \"running\"\n   * - \"succeeded\"\n   * - \"failed\"\n   * - \"canceled\"\n   */\n  status: OperationStatus;\n\n  /**\n   * The API version used to train this model.\n   */\n  apiVersion?: string;\n\n  /**\n   * The unique ID of this operation.\n   */\n  operationId: string;\n\n  /**\n   * A number between 0 and 100 representing the progress of the operation.\n   */\n  percentCompleted: number;\n\n  /**\n   * The Date and Time that the operation was created.\n   */\n  createdOn: Date;\n\n  /**\n   * The date & time that the operation state was last modified.\n   */\n  lastUpdatedOn: Date;\n\n  /**\n   * Additional, user-defined key-value pairs associated with the model as metadata.\n   */\n  tags?: Record<string, string>;\n}\n\n/**\n * The state of a model creation operation.\n */\nexport interface DocumentModelOperationState\n  extends PollOperationState<DocumentModelDetails>,\n    ModelAdministrationOperationStateCommon {}\n\n/**\n * The respones of a model creation operation.\n * @internal\n */\nexport type DocumentModelBuildResponse =\n  | DocumentModelBuildOperationDetails\n  | DocumentModelCopyToOperationDetails\n  | DocumentModelComposeOperationDetails;\n\n/**\n * The possible responses of an administration operation.\n * @internal\n */\nexport type DocumentModelAdministrationResponse =\n  | DocumentModelBuildResponse\n  | DocumentClassifierBuildOperationDetails;\n\n/**\n * Convert an operation result into a training poller state.\n * @internal\n */\nexport async function toTrainingPollOperationState(\n  response: DocumentModelAdministrationResponse,\n): Promise<DocumentModelOperationState | DocumentClassifierOperationState> {\n  return {\n    operationId: response.operationId,\n    status: response.status,\n    apiVersion: response.apiVersion,\n    percentCompleted: response.percentCompleted ?? 0,\n    lastUpdatedOn: response.lastUpdatedOn,\n    createdOn: response.createdOn,\n    error: response.error && new FormRecognizerError(response.error),\n    isCancelled: response.status === \"canceled\",\n    isCompleted: response.status === \"succeeded\",\n    isStarted: response.status !== \"notStarted\",\n    tags: response.tags,\n\n    // The following assertion is required. Technically the type of `response.result` is\n    // `DocumentModelDetails | DocumentClassifierDetails | undefined`, which isn't assignable to the type of\n    // either operation state's result. We would need some kind of dependent typing to express how the type of `result`\n    // actually _determines_ the type of the resulting return value.\n    result: response.result,\n  } as DocumentModelOperationState | DocumentClassifierOperationState;\n}\n\n/**\n * A long-running operation (poller) that tracks the state of a model creation operation, eventually producing a\n * {@link DocumentModelDetails}.\n */\nexport type DocumentModelPoller = PollerLike<DocumentModelOperationState, DocumentModelDetails>;\n\n/**\n * Defines a training operation.\n * @internal\n */\nexport interface TrainingOperationDefinition<State extends AdministrationOperationState> {\n  /**\n   * A function to start the operation, producing an operationLocation.\n   */\n  start: (ctx: OperationContext) => Promise<{ operationLocation?: string }>;\n  /**\n   * Options for the poller and requests.\n   */\n  options: PollerOptions<State> & OperationOptions;\n}\n\n/**\n * A long-running operation (poller) that tracks the state of a custom classifier creation operation, eventually\n * producing a {@link DocumentClassifierDetails}.\n */\nexport type DocumentClassifierPoller = PollerLike<\n  DocumentClassifierOperationState,\n  DocumentClassifierDetails\n>;\n\n/**\n * The state of a model creation operation.\n */\nexport interface DocumentClassifierOperationState\n  extends PollOperationState<DocumentClassifierDetails>,\n    ModelAdministrationOperationStateCommon {}\n"]}