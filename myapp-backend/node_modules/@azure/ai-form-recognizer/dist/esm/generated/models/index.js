/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Known values of {@link StringIndexType} that the service accepts. */
export var KnownStringIndexType;
(function (KnownStringIndexType) {
    /** User-perceived display character, or grapheme cluster, as defined by Unicode 8.0.0. */
    KnownStringIndexType["TextElements"] = "textElements";
    /** Character unit represented by a single unicode code point.  Used by Python 3. */
    KnownStringIndexType["UnicodeCodePoint"] = "unicodeCodePoint";
    /** Character unit represented by a 16-bit Unicode code unit.  Used by JavaScript, Java, and .NET. */
    KnownStringIndexType["Utf16CodeUnit"] = "utf16CodeUnit";
})(KnownStringIndexType || (KnownStringIndexType = {}));
/** Known values of {@link DocumentAnalysisFeature} that the service accepts. */
export var KnownDocumentAnalysisFeature;
(function (KnownDocumentAnalysisFeature) {
    /** Perform OCR at a higher resolution to handle documents with fine print. */
    KnownDocumentAnalysisFeature["OcrHighResolution"] = "ocrHighResolution";
    /** Enable the detection of the text content language. */
    KnownDocumentAnalysisFeature["Languages"] = "languages";
    /** Enable the detection of barcodes in the document. */
    KnownDocumentAnalysisFeature["Barcodes"] = "barcodes";
    /** Enable the detection of mathematical expressions in the document. */
    KnownDocumentAnalysisFeature["Formulas"] = "formulas";
    /** Enable the detection of general key value pairs (form fields) in the document. */
    KnownDocumentAnalysisFeature["KeyValuePairs"] = "keyValuePairs";
    /** Enable the recognition of various font styles. */
    KnownDocumentAnalysisFeature["StyleFont"] = "styleFont";
})(KnownDocumentAnalysisFeature || (KnownDocumentAnalysisFeature = {}));
/** Known values of {@link LengthUnit} that the service accepts. */
export var KnownLengthUnit;
(function (KnownLengthUnit) {
    /** Length unit for image files. */
    KnownLengthUnit["Pixel"] = "pixel";
    /** Length unit for PDF files. */
    KnownLengthUnit["Inch"] = "inch";
})(KnownLengthUnit || (KnownLengthUnit = {}));
/** Known values of {@link SelectionMarkState} that the service accepts. */
export var KnownSelectionMarkState;
(function (KnownSelectionMarkState) {
    /** The selection mark is selected, often indicated by a check âœ“ or cross X inside the selection mark. */
    KnownSelectionMarkState["Selected"] = "selected";
    /** The selection mark is not selected. */
    KnownSelectionMarkState["Unselected"] = "unselected";
})(KnownSelectionMarkState || (KnownSelectionMarkState = {}));
/** Known values of {@link DocumentBarcodeKind} that the service accepts. */
export var KnownDocumentBarcodeKind;
(function (KnownDocumentBarcodeKind) {
    /** QR code, as defined in ISO/IEC 18004:2015. */
    KnownDocumentBarcodeKind["QRCode"] = "QRCode";
    /** PDF417, as defined in ISO 15438. */
    KnownDocumentBarcodeKind["PDF417"] = "PDF417";
    /** GS1 12-digit Universal Product Code. */
    KnownDocumentBarcodeKind["Upca"] = "UPCA";
    /** GS1 6-digit Universal Product Code. */
    KnownDocumentBarcodeKind["Upce"] = "UPCE";
    /** Code 39 barcode, as defined in ISO/IEC 16388:2007. */
    KnownDocumentBarcodeKind["Code39"] = "Code39";
    /** Code 128 barcode, as defined in ISO/IEC 15417:2007. */
    KnownDocumentBarcodeKind["Code128"] = "Code128";
    /** GS1 8-digit International Article Number (European Article Number). */
    KnownDocumentBarcodeKind["EAN8"] = "EAN8";
    /** GS1 13-digit International Article Number (European Article Number). */
    KnownDocumentBarcodeKind["EAN13"] = "EAN13";
    /** GS1 DataBar barcode. */
    KnownDocumentBarcodeKind["DataBar"] = "DataBar";
    /** Code 93 barcode, as defined in ANSI/AIM BC5-1995. */
    KnownDocumentBarcodeKind["Code93"] = "Code93";
    /** Codabar barcode, as defined in ANSI/AIM BC3-1995. */
    KnownDocumentBarcodeKind["Codabar"] = "Codabar";
    /** GS1 DataBar Expanded barcode. */
    KnownDocumentBarcodeKind["DataBarExpanded"] = "DataBarExpanded";
    /** Interleaved 2 of 5 barcode, as defined in ANSI/AIM BC2-1995. */
    KnownDocumentBarcodeKind["ITF"] = "ITF";
    /** Micro QR code, as defined in ISO/IEC 23941:2022. */
    KnownDocumentBarcodeKind["MicroQRCode"] = "MicroQRCode";
    /** Aztec code, as defined in ISO/IEC 24778:2008. */
    KnownDocumentBarcodeKind["Aztec"] = "Aztec";
    /** Data matrix code, as defined in ISO/IEC 16022:2006. */
    KnownDocumentBarcodeKind["DataMatrix"] = "DataMatrix";
    /** MaxiCode, as defined in ISO/IEC 16023:2000. */
    KnownDocumentBarcodeKind["MaxiCode"] = "MaxiCode";
})(KnownDocumentBarcodeKind || (KnownDocumentBarcodeKind = {}));
/** Known values of {@link DocumentFormulaKind} that the service accepts. */
export var KnownDocumentFormulaKind;
(function (KnownDocumentFormulaKind) {
    /** A formula embedded within the content of a paragraph. */
    KnownDocumentFormulaKind["Inline"] = "inline";
    /** A formula in display mode that takes up an entire line. */
    KnownDocumentFormulaKind["Display"] = "display";
})(KnownDocumentFormulaKind || (KnownDocumentFormulaKind = {}));
/** Known values of {@link ParagraphRole} that the service accepts. */
export var KnownParagraphRole;
(function (KnownParagraphRole) {
    /** Text near the top edge of the page. */
    KnownParagraphRole["PageHeader"] = "pageHeader";
    /** Text near the bottom edge of the page. */
    KnownParagraphRole["PageFooter"] = "pageFooter";
    /** Page number. */
    KnownParagraphRole["PageNumber"] = "pageNumber";
    /** Top-level title describing the entire document. */
    KnownParagraphRole["Title"] = "title";
    /** Sub heading describing a section of the document. */
    KnownParagraphRole["SectionHeading"] = "sectionHeading";
    /** A note usually placed after the main content on a page. */
    KnownParagraphRole["Footnote"] = "footnote";
    /** A block of formulas, often with shared alignment. */
    KnownParagraphRole["FormulaBlock"] = "formulaBlock";
})(KnownParagraphRole || (KnownParagraphRole = {}));
/** Known values of {@link DocumentTableCellKind} that the service accepts. */
export var KnownDocumentTableCellKind;
(function (KnownDocumentTableCellKind) {
    /** Contains the main content/data. */
    KnownDocumentTableCellKind["Content"] = "content";
    /** Describes the content of the row. */
    KnownDocumentTableCellKind["RowHeader"] = "rowHeader";
    /** Describes the content of the column. */
    KnownDocumentTableCellKind["ColumnHeader"] = "columnHeader";
    /** Describes the row headers, usually located at the top left corner of a table. */
    KnownDocumentTableCellKind["StubHead"] = "stubHead";
    /** Describes the content in (parts of) the table. */
    KnownDocumentTableCellKind["Description"] = "description";
})(KnownDocumentTableCellKind || (KnownDocumentTableCellKind = {}));
/** Known values of {@link FontStyle} that the service accepts. */
export var KnownFontStyle;
(function (KnownFontStyle) {
    /** Characters are represented normally. */
    KnownFontStyle["Normal"] = "normal";
    /** Characters are visually slanted to the right. */
    KnownFontStyle["Italic"] = "italic";
})(KnownFontStyle || (KnownFontStyle = {}));
/** Known values of {@link FontWeight} that the service accepts. */
export var KnownFontWeight;
(function (KnownFontWeight) {
    /** Characters are represented normally. */
    KnownFontWeight["Normal"] = "normal";
    /** Characters are represented with thicker strokes. */
    KnownFontWeight["Bold"] = "bold";
})(KnownFontWeight || (KnownFontWeight = {}));
/** Known values of {@link DocumentFieldType} that the service accepts. */
export var KnownDocumentFieldType;
(function (KnownDocumentFieldType) {
    /** Plain text. */
    KnownDocumentFieldType["String"] = "string";
    /** Date, normalized to ISO 8601 (YYYY-MM-DD) format. */
    KnownDocumentFieldType["Date"] = "date";
    /** Time, normalized to ISO 8601 (hh:mm:ss) format. */
    KnownDocumentFieldType["Time"] = "time";
    /** Phone number, normalized to E.164 (+{CountryCode}{SubscriberNumber}) format. */
    KnownDocumentFieldType["PhoneNumber"] = "phoneNumber";
    /** Floating point number, normalized to double precision floating point. */
    KnownDocumentFieldType["Number"] = "number";
    /** Integer number, normalized to 64-bit signed integer. */
    KnownDocumentFieldType["Integer"] = "integer";
    /** Is field selected? */
    KnownDocumentFieldType["SelectionMark"] = "selectionMark";
    /** Country/region, normalized to ISO 3166-1 alpha-3 format (ex. USA). */
    KnownDocumentFieldType["CountryRegion"] = "countryRegion";
    /** Is signature present? */
    KnownDocumentFieldType["Signature"] = "signature";
    /** List of subfields of the same type. */
    KnownDocumentFieldType["Array"] = "array";
    /** Named list of subfields of potentially different types. */
    KnownDocumentFieldType["Object"] = "object";
    /** Currency amount with optional currency symbol and unit. */
    KnownDocumentFieldType["Currency"] = "currency";
    /** Parsed address. */
    KnownDocumentFieldType["Address"] = "address";
    /** Boolean value, normalized to true or false. */
    KnownDocumentFieldType["Boolean"] = "boolean";
})(KnownDocumentFieldType || (KnownDocumentFieldType = {}));
/** Known values of {@link DocumentSignatureType} that the service accepts. */
export var KnownDocumentSignatureType;
(function (KnownDocumentSignatureType) {
    /** A signature is detected. */
    KnownDocumentSignatureType["Signed"] = "signed";
    /** No signatures are detected. */
    KnownDocumentSignatureType["Unsigned"] = "unsigned";
})(KnownDocumentSignatureType || (KnownDocumentSignatureType = {}));
/** Known values of {@link DocumentBuildMode} that the service accepts. */
export var KnownDocumentBuildMode;
(function (KnownDocumentBuildMode) {
    /** Target documents with similar visual templates. */
    KnownDocumentBuildMode["Template"] = "template";
    /** Support documents with diverse visual templates. */
    KnownDocumentBuildMode["Neural"] = "neural";
})(KnownDocumentBuildMode || (KnownDocumentBuildMode = {}));
/** Known values of {@link OperationKind} that the service accepts. */
export var KnownOperationKind;
(function (KnownOperationKind) {
    /** Build a new custom document model. */
    KnownOperationKind["DocumentModelBuild"] = "documentModelBuild";
    /** Compose a new custom document model from existing models. */
    KnownOperationKind["DocumentModelCompose"] = "documentModelCompose";
    /** Copy an existing document model to potentially a different resource, region, or subscription. */
    KnownOperationKind["DocumentModelCopyTo"] = "documentModelCopyTo";
    /** Build a new custom classifier model. */
    KnownOperationKind["DocumentClassifierBuild"] = "documentClassifierBuild";
})(KnownOperationKind || (KnownOperationKind = {}));
//# sourceMappingURL=index.js.map