import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DocumentClassifiers } from "../operationsInterfaces/index.js";
import { GeneratedClient } from "../generatedClient.js";
import { DocumentClassifierDetails, DocumentClassifiersListClassifiersOptionalParams, BuildDocumentClassifierRequest, DocumentClassifiersBuildClassifierOptionalParams, DocumentClassifiersBuildClassifierResponse, DocumentClassifiersGetClassifierOptionalParams, DocumentClassifiersGetClassifierResponse, DocumentClassifiersDeleteClassifierOptionalParams, ContentType, DocumentClassifiersClassifyDocument$binaryOptionalParams, DocumentClassifiersClassifyDocument$textOptionalParams, DocumentClassifiersClassifyDocument$jsonOptionalParams, DocumentClassifiersClassifyDocumentResponse, DocumentClassifiersGetClassifyResultOptionalParams, DocumentClassifiersGetClassifyResultResponse } from "../models/index.js";
/** Class containing DocumentClassifiers operations. */
export declare class DocumentClassifiersImpl implements DocumentClassifiers {
    private readonly client;
    /**
     * Initialize a new instance of the class DocumentClassifiers class.
     * @param client Reference to the service client
     */
    constructor(client: GeneratedClient);
    /**
     * List all document classifiers.
     * @param options The options parameters.
     */
    listClassifiers(options?: DocumentClassifiersListClassifiersOptionalParams): PagedAsyncIterableIterator<DocumentClassifierDetails>;
    private listClassifiersPagingPage;
    private listClassifiersPagingAll;
    /**
     * Builds a custom document classifier.
     * @param buildRequest Building request parameters.
     * @param options The options parameters.
     */
    buildClassifier(buildRequest: BuildDocumentClassifierRequest, options?: DocumentClassifiersBuildClassifierOptionalParams): Promise<DocumentClassifiersBuildClassifierResponse>;
    /**
     * List all document classifiers.
     * @param options The options parameters.
     */
    private _listClassifiers;
    /**
     * Gets detailed document classifier information.
     * @param classifierId Unique document classifier name.
     * @param options The options parameters.
     */
    getClassifier(classifierId: string, options?: DocumentClassifiersGetClassifierOptionalParams): Promise<DocumentClassifiersGetClassifierResponse>;
    /**
     * Deletes document classifier.
     * @param classifierId Unique document classifier name.
     * @param options The options parameters.
     */
    deleteClassifier(classifierId: string, options?: DocumentClassifiersDeleteClassifierOptionalParams): Promise<void>;
    /**
     * Classifies document with document classifier.
     * @param classifierId Unique document classifier name.
     * @param contentType Upload file type
     * @param options The options parameters.
     */
    classifyDocument(classifierId: string, contentType: ContentType, options?: DocumentClassifiersClassifyDocument$binaryOptionalParams): Promise<DocumentClassifiersClassifyDocumentResponse>;
    /**
     * Classifies document with document classifier.
     * @param classifierId Unique document classifier name.
     * @param contentType Upload file type
     * @param options The options parameters.
     */
    classifyDocument(classifierId: string, contentType: "text/html", options?: DocumentClassifiersClassifyDocument$textOptionalParams): Promise<DocumentClassifiersClassifyDocumentResponse>;
    /**
     * Classifies document with document classifier.
     * @param classifierId Unique document classifier name.
     * @param contentType Body Parameter content-type
     * @param options The options parameters.
     */
    classifyDocument(classifierId: string, contentType: "application/json", options?: DocumentClassifiersClassifyDocument$jsonOptionalParams): Promise<DocumentClassifiersClassifyDocumentResponse>;
    /**
     * Gets the result of document classifier.
     * @param classifierId Unique document classifier name.
     * @param resultId Analyze operation result ID.
     * @param options The options parameters.
     */
    getClassifyResult(classifierId: string, resultId: string, options?: DocumentClassifiersGetClassifyResultOptionalParams): Promise<DocumentClassifiersGetClassifyResultResponse>;
    /**
     * ListClassifiersNext
     * @param nextLink The nextLink from the previous successful call to the ListClassifiers method.
     * @param options The options parameters.
     */
    private _listClassifiersNext;
}
//# sourceMappingURL=documentClassifiers.d.ts.map