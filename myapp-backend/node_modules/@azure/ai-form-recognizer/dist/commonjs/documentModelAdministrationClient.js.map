{"version":3,"file":"documentModelAdministrationClient.js","sourceRoot":"","sources":["../../src/documentModelAdministrationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { TracingClient } from \"@azure/core-tracing\";\nimport { createTracingClient } from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"./constants.js\";\nimport type {\n  CopyAuthorization,\n  GeneratedClient,\n  ResourceDetails,\n  DocumentModelDetails,\n  DocumentModelSummary,\n  OperationSummary,\n  OperationDetails,\n  DocumentClassifierDetails,\n} from \"./generated/index.js\";\nimport { accept1 } from \"./generated/models/parameters.js\";\nimport type {\n  TrainingOperationDefinition,\n  DocumentModelOperationState,\n  DocumentModelPoller,\n  DocumentModelBuildResponse,\n  AdministrationOperationState,\n  DocumentClassifierPoller,\n  DocumentClassifierOperationState,\n} from \"./lro/administration.js\";\nimport { toTrainingPollOperationState } from \"./lro/administration.js\";\nimport type { OperationContext } from \"./lro/util/poller.js\";\nimport { lro } from \"./lro/util/poller.js\";\nimport type {\n  BeginCopyModelOptions,\n  DeleteDocumentModelOptions,\n  DocumentModelAdministrationClientOptions,\n  GetCopyAuthorizationOptions,\n  GetResourceDetailsOptions,\n  GetModelOptions,\n  GetOperationOptions,\n  ListModelsOptions,\n  ListOperationsOptions,\n  PollerOptions,\n} from \"./options/index.js\";\nimport type { BeginBuildDocumentClassifierOptions } from \"./options/BuildDocumentClassifierOptions.js\";\nimport type {\n  BeginBuildDocumentModelOptions,\n  BeginComposeDocumentModelOptions,\n  DocumentModelBuildMode,\n} from \"./options/BuildModelOptions.js\";\nimport { Mappers, SERIALIZER, makeServiceClient } from \"./util.js\";\nimport type { FullOperationResponse, OperationOptions } from \"@azure/core-client\";\nimport type {\n  DocumentModelSource,\n  DocumentClassifierDocumentTypeSources,\n  AzureBlobSource,\n} from \"./models/index.js\";\n\n/**\n * A client for interacting with the Form Recognizer service's model management features, such as creating, reading,\n * listing, deleting, and copying models.\n *\n * ### Examples:\n *\n * #### Azure Active Directory\n *\n * ```ts snippet:ReadmeSampleAdministrationClient_TokenCredential\n * import { DefaultAzureCredential } from \"@azure/identity\";\n * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n *\n * const credential = new DefaultAzureCredential();\n * const client = new DocumentModelAdministrationClient(\n *   \"https://<resource name>.cognitiveservices.azure.com\",\n *   credential,\n * );\n * ```\n *\n * #### API Key (Subscription Key)\n *\n * ```ts snippet:ReadmeSampleAdministrationClient_KeyCredential\n * import { AzureKeyCredential, DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n *\n * const credential = new AzureKeyCredential(\"<API key>\");\n * const client = new DocumentModelAdministrationClient(\n *   \"https://<resource name>.cognitiveservices.azure.com\",\n *   credential,\n * );\n * ```\n */\nexport class DocumentModelAdministrationClient {\n  private _restClient: GeneratedClient;\n  private _tracing: TracingClient;\n\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a an Azure Identity `TokenCredential`.\n   *\n   * See the [`@azure/identity`](https://npmjs.com/package/\\@azure/identity) package for more information about\n   * authenticating with Azure Active Directory.\n   *\n   * ### Example:\n   *\n   * ```ts snippet:ReadmeSampleAdministrationClient_TokenCredential\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a TokenCredential instance from the `@azure/identity` package\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: DocumentModelAdministrationClientOptions,\n  );\n  /**\n   * Create a DocumentModelAdministrationClient instance from a resource endpoint and a static API key\n   * (`KeyCredential`),\n   *\n   * ### Example:\n   *\n   * ```ts snippet:ReadmeSampleAdministrationClient_KeyCredential\n   * import { AzureKeyCredential, DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new AzureKeyCredential(\"<API key>\");\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   * ```\n   *\n   * @param endpoint - the endpoint URL of an Azure Cognitive Services instance\n   * @param credential - a KeyCredential containing the Cognitive Services instance subscription key\n   * @param options - optional settings for configuring all methods in the client\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: DocumentModelAdministrationClientOptions,\n  );\n  /**\n   * @hidden\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: DocumentModelAdministrationClientOptions,\n  );\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options: DocumentModelAdministrationClientOptions = {},\n  ) {\n    this._restClient = makeServiceClient(endpoint, credential, options);\n    this._tracing = createTracingClient({\n      packageName: \"@azure/ai-form-recognizer\",\n      packageVersion: SDK_VERSION,\n      namespace: \"Microsoft.CognitiveServices\",\n    });\n  }\n\n  // #region Model Creation\n\n  /**\n   * Build a new model with a given ID from a set of input documents and labeled fields.\n   *\n   * The Model ID can consist of any text, so long as it does not begin with \"prebuilt-\" (as these models refer to\n   * prebuilt Form Recognizer models that are common to all resources), and so long as it does not already exist within\n   * the resource.\n   *\n   * The Form Recognizer service reads the training data set from an Azure Storage container, given as a URL to the\n   * container with a SAS token that allows the service backend to communicate with the container. At a minimum, the\n   * \"read\" and \"list\" permissions are required. In addition, the data in the given container must be organized\n   * according to a particular convention, which is documented in [the service's documentation for building custom\n   * models](https://aka.ms/form-recognizer/custom).\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleBuildModel\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const containerSasUrl = \"<SAS url to the blob container storing training documents>\";\n   *\n   * // You must provide the model ID. It can be any text that does not start with \"prebuilt-\".\n   * // For example, you could provide a randomly generated GUID using the \"uuid\" package.\n   * // The second parameter is the SAS-encoded URL to an Azure Storage container with the training documents.\n   * // The third parameter is the build mode: one of \"template\" (the only mode prior to 4.0.0-beta.3) or \"neural\".\n   * // See https://aka.ms/azsdk/formrecognizer/buildmode for more information about build modes.\n   * const poller = await client.beginBuildDocumentModel(\"<model ID>\", containerSasUrl, \"template\", {\n   *   // The model description is optional and can be any text.\n   *   description: \"This is my new model!\",\n   *   onProgress: ({ status }) => {\n   *     console.log(`operation status: ${status}`);\n   *   },\n   * });\n   * const model = await poller.pollUntilDone();\n   *\n   * console.log(`Model ID: ${model.modelId}`);\n   * console.log(`Description: ${model.description}`);\n   * console.log(`Created: ${model.createdOn}`);\n   *\n   * // A model may contain several document types, which describe the possible object structures of fields extracted using\n   * // this model\n   *\n   * console.log(\"Document Types:\");\n   * for (const [docType, { description, fieldSchema: schema }] of Object.entries(\n   *   model.docTypes ?? {},\n   * )) {\n   *   console.log(`- Name: \"${docType}\"`);\n   *   console.log(`  Description: \"${description}\"`);\n   *\n   *   // For simplicity, this example will only show top-level field names\n   *   console.log(\"  Fields:\");\n   *\n   *   for (const [fieldName, fieldSchema] of Object.entries(schema)) {\n   *     console.log(`  - \"${fieldName}\" (${fieldSchema.type})`);\n   *     console.log(`    ${fieldSchema.description ?? \"<no description>\"}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param containerUrl - SAS-encoded URL to an Azure Storage container holding the training data set\n   * @param buildMode - the mode to use when building the model (see `DocumentModelBuildMode`)\n   * @param options - optional settings for the model build operation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginBuildDocumentModel(\n    modelId: string,\n    containerUrl: string,\n    buildMode: DocumentModelBuildMode,\n    options?: BeginBuildDocumentModelOptions,\n  ): Promise<DocumentModelPoller>;\n\n  /**\n   * Build a new model with a given ID from a model content source.\n   *\n   * The Model ID can consist of any text, so long as it does not begin with \"prebuilt-\" (as these models refer to\n   * prebuilt Form Recognizer models that are common to all resources), and so long as it does not already exist within\n   * the resource.\n   *\n   * The content source describes the mechanism the service will use to read the input training data. See the\n   * {@link DocumentModelContentSource} type for more information.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleBuildModel_Container\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const containerSasUrl = \"<SAS url to the blob container storing training documents>\";\n   *\n   * // You must provide the model ID. It can be any text that does not start with \"prebuilt-\".\n   * // For example, you could provide a randomly generated GUID using the \"uuid\" package.\n   * // The second parameter is the SAS-encoded URL to an Azure Storage container with the training documents.\n   * // The third parameter is the build mode: one of \"template\" (the only mode prior to 4.0.0-beta.3) or \"neural\".\n   * // See https://aka.ms/azsdk/formrecognizer/buildmode for more information about build modes.\n   * const poller = await client.beginBuildDocumentModel(\n   *   \"<model ID>\",\n   *   { azureBlobSource: { containerUrl: containerSasUrl } },\n   *   \"template\",\n   *   {\n   *     // The model description is optional and can be any text.\n   *     description: \"This is my new model!\",\n   *     onProgress: ({ status }) => {\n   *       console.log(`operation status: ${status}`);\n   *     },\n   *   },\n   * );\n   * const model = await poller.pollUntilDone();\n   *\n   * console.log(`Model ID: ${model.modelId}`);\n   * console.log(`Description: ${model.description}`);\n   * console.log(`Created: ${model.createdOn}`);\n   *\n   * // A model may contain several document types, which describe the possible object structures of fields extracted using\n   * // this model\n   *\n   * console.log(\"Document Types:\");\n   * for (const [docType, { description, fieldSchema: schema }] of Object.entries(\n   *   model.docTypes ?? {},\n   * )) {\n   *   console.log(`- Name: \"${docType}\"`);\n   *   console.log(`  Description: \"${description}\"`);\n   *\n   *   // For simplicity, this example will only show top-level field names\n   *   console.log(\"  Fields:\");\n   *\n   *   for (const [fieldName, fieldSchema] of Object.entries(schema)) {\n   *     console.log(`  - \"${fieldName}\" (${fieldSchema.type})`);\n   *     console.log(`    ${fieldSchema.description ?? \"<no description>\"}`);\n   *   }\n   * }\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param contentSource - a content source that provides the training data for this model\n   * @param buildMode - the mode to use when building the model (see `DocumentModelBuildMode`)\n   * @param options - optional settings for the model build operation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginBuildDocumentModel(\n    modelId: string,\n    contentSource: DocumentModelSource,\n    buildMode: DocumentModelBuildMode,\n    options?: BeginBuildDocumentModelOptions,\n  ): Promise<DocumentModelPoller>;\n\n  public async beginBuildDocumentModel(\n    modelId: string,\n    urlOrSource: string | DocumentModelSource,\n    buildMode: DocumentModelBuildMode,\n    options: BeginBuildDocumentModelOptions = {},\n  ): Promise<DocumentModelPoller> {\n    const sourceInfo =\n      typeof urlOrSource === \"string\"\n        ? ({\n            azureBlobSource: {\n              containerUrl: urlOrSource,\n            },\n          } as AzureBlobSource)\n        : urlOrSource;\n\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginBuildDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createAdministrationPoller({\n          options: finalOptions,\n          start: (ctx) =>\n            this._restClient.documentModels.buildModel(\n              {\n                modelId,\n                description: finalOptions.description,\n                ...sourceInfo,\n                buildMode,\n              },\n              {\n                ...finalOptions,\n                abortSignal: ctx.abortSignal,\n              },\n            ),\n        }),\n    );\n  }\n\n  /**\n   * Creates a single composed model from several pre-existing submodels.\n   *\n   * The resulting composed model combines the document types of its component models, and inserts a classification step\n   * into the extraction pipeline to determine which of its component submodels is most appropriate for the given input.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleComposeModel\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const composeModelId = \"aNewComposedModel\";\n   * const subModelIds = [\"documentType1Model\", \"documentType2Model\", \"documentType3Model\"];\n   *\n   * // The resulting composed model can classify and extract data from documents\n   * // conforming to any of the above document types\n   * const poller = await client.beginComposeDocumentModel(composeModelId, subModelIds, {\n   *   description: \"This is a composed model that can handle several document types.\",\n   * });\n   * // Model composition, like all other model creation operations, returns a poller that eventually produces a\n   * // ModelDetails object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the model\n   *   description, // identical to the description given when creating the model\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes, // information about the document types of the composed submodels\n   * } = modelDetails;\n   * ```\n   *\n   * @param modelId - the unique ID of the model to create\n   * @param componentModelIds - an Iterable of strings representing the unique model IDs of the models to compose\n   * @param options - optional settings for model creation\n   * @returns a long-running operation (poller) that will eventually produce the created model information or an error\n   */\n  public async beginComposeDocumentModel(\n    modelId: string,\n    componentModelIds: Iterable<string>,\n    options: BeginComposeDocumentModelOptions = {},\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginComposeDocumentModel\",\n      options,\n      (finalOptions) =>\n        this.createAdministrationPoller({\n          options: finalOptions,\n          start: (ctx) =>\n            this._restClient.documentModels.composeModel(\n              {\n                modelId,\n                componentModels: [...componentModelIds].map((submodelId) => ({\n                  modelId: submodelId,\n                })),\n                description: finalOptions.description,\n                tags: finalOptions.tags,\n              },\n              {\n                ...finalOptions,\n                abortSignal: ctx.abortSignal,\n              },\n            ),\n        }),\n    );\n  }\n\n  /**\n   * Creates an authorization to copy a model into the resource, used with the `beginCopyModelTo` method.\n   *\n   * The `CopyAuthorization` grants another cognitive service resource the right to create a model in this client's\n   * resource with the model ID and optional description that are encoded into the authorization.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleGetCopyAuthorization\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * // The copyAuthorization data structure stored below grants any cognitive services resource the right to copy a\n   * // model into the client's resource with the given destination model ID.\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   * ```\n   *\n   * @param destinationModelId - the unique ID of the destination model (the ID to copy the model into)\n   * @param options - optional settings for creating the copy authorization\n   * @returns a copy authorization that encodes the given modelId and optional description\n   */\n  public async getCopyAuthorization(\n    destinationModelId: string,\n    options: GetCopyAuthorizationOptions = {},\n  ): Promise<CopyAuthorization> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getCopyAuthorization\",\n      options,\n      (finalOptions) =>\n        this._restClient.documentModels.authorizeModelCopy(\n          {\n            modelId: destinationModelId,\n            description: finalOptions.description,\n            tags: finalOptions.tags,\n          },\n          finalOptions,\n        ),\n    );\n  }\n\n  /**\n   * Copies a model with the given ID into the resource and model ID encoded by a given copy authorization.\n   *\n   * See {@link CopyAuthorization} and {@link getCopyAuthorization}.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleCopyModel\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * // We create the copy authorization using a client authenticated with the destination resource. Note that these two\n   * // resources can be the same (you can copy a model to a new ID in the same resource).\n   * const copyAuthorization = await client.getCopyAuthorization(\"<destination model ID>\");\n   *\n   * // Finally, use the _source_ client to copy the model and await the copy operation\n   * // We need a client for the source model's resource\n   * const sourceEndpoint = \"https://<source resource name>.cognitiveservices.azure.com\";\n   * const sourceCredential = new AzureKeyCredential(\"<source api key>\");\n   * const sourceClient = new DocumentModelAdministrationClient(sourceEndpoint, sourceCredential);\n   * const poller = await sourceClient.beginCopyModelTo(\"<source model ID>\", copyAuthorization);\n   *\n   * // Model copying, like all other model creation operations, returns a poller that eventually produces a ModelDetails\n   * // object\n   * const modelDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   modelId, // identical to the modelId given when creating the copy authorization\n   *   description, // identical to the description given when creating the copy authorization\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   docTypes, // information about the document types of the model (identical to the original, source model)\n   * } = modelDetails;\n   * ```\n   *\n   * @param sourceModelId - the unique ID of the source model that will be copied\n   * @param authorization - an authorization to copy the model, created using the {@link getCopyAuthorization}\n   * @param options - optional settings for\n   * @returns a long-running operation (poller) that will eventually produce the copied model information or an error\n   */\n  public async beginCopyModelTo(\n    sourceModelId: string,\n    authorization: CopyAuthorization,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: BeginCopyModelOptions = {},\n  ): Promise<DocumentModelPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginCopyModel\",\n      options,\n      (finalOptions) =>\n        this.createAdministrationPoller({\n          options: finalOptions,\n          start: () =>\n            this._restClient.documentModels.copyModelTo(sourceModelId, authorization, finalOptions),\n        }),\n    );\n  }\n\n  // #endregion\n\n  // #region Document Classifiers\n\n  /**\n   * Build a new document classifier with the given classifier ID and document types.\n   *\n   * The classifier ID must be unique among classifiers within the resource.\n   *\n   * The document types are given as an object that maps the name of the document type to the training data set for that\n   * document type. Two training data input methods are supported:\n   *\n   * - `azureBlobSource`, which trains a classifier using the data in the given Azure Blob Storage container.\n   * - `azureBlobFileListSource`, which is similar to `azureBlobSource` but allows for more fine-grained control over\n   *   the files that are included in the training data set by using a JSONL-formatted file list.\n   *\n   * The Form Recognizer service reads the training data set from an Azure Storage container, given as a URL to the\n   * container with a SAS token that allows the service backend to communicate with the container. At a minimum, the\n   * \"read\" and \"list\" permissions are required. In addition, the data in the given container must be organized\n   * according to a particular convention, which is documented in [the service's documentation for building custom\n   * document classifiers](https://aka.ms/azsdk/formrecognizer/buildclassifiermodel).\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleBuildClassifier\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const newClassifiedId = \"aNewClassifier\";\n   * const containerUrl1 = \"<training data container SAS URL 1>\";\n   * const containerUrl2 = \"<training data container SAS URL 2>\";\n   *\n   * const poller = await client.beginBuildDocumentClassifier(\n   *   newClassifiedId,\n   *   {\n   *     // The document types. Each entry in this object should map a document type name to a\n   *     // `ClassifierDocumentTypeDetails` object\n   *     formX: {\n   *       azureBlobSource: {\n   *         containerUrl: containerUrl1,\n   *       },\n   *     },\n   *     formY: {\n   *       azureBlobFileListSource: {\n   *         containerUrl: containerUrl2,\n   *         fileList: \"path/to/fileList.jsonl\",\n   *       },\n   *     },\n   *   },\n   *   {\n   *     // Optionally, a text description may be attached to the classifier\n   *     description: \"This is an example classifier!\",\n   *   },\n   * );\n   *\n   * // Classifier building, like model creation operations, returns a poller that eventually produces a\n   * // DocumentClassifierDetails object\n   * const classifierDetails = await poller.pollUntilDone();\n   *\n   * const {\n   *   classifierId, // identical to the classifierId given when creating the classifier\n   *   description, // identical to the description given when creating the classifier (if any)\n   *   createdOn, // the Date (timestamp) that the classifier was created\n   *   docTypes, // information about the document types in the classifier and their details\n   * } = classifierDetails;\n   * ```\n   *\n   * @param classifierId - the unique ID of the classifier to create\n   * @param docTypeSources - the document types to include in the classifier and their sources (a map of document type\n   *                         names to `ClassifierDocumentTypeDetails`)\n   * @param options - optional settings for the classifier build operation\n   * @returns a long-running operation (poller) that will eventually produce the created classifier details or an error\n   */\n  public async beginBuildDocumentClassifier(\n    classifierId: string,\n    docTypeSources: DocumentClassifierDocumentTypeSources,\n    options: BeginBuildDocumentClassifierOptions = {},\n  ): Promise<DocumentClassifierPoller> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.beginBuildDocumentClassifier\",\n      options,\n      (finalOptions) =>\n        this.createAdministrationPoller<DocumentClassifierOperationState>({\n          options: finalOptions,\n          start: () =>\n            this._restClient.documentClassifiers.buildClassifier(\n              {\n                classifierId,\n                description: finalOptions.description,\n                docTypes: docTypeSources,\n              },\n              finalOptions,\n            ),\n        }),\n    );\n  }\n\n  // #endregion\n\n  /**\n   * Create an LRO poller that handles model creation operations.\n   *\n   * This is the meat of the above model creation operations.\n   *\n   * @param definition - operation definition (start operation method, request options)\n   * @returns a model poller (produces a ModelDetails)\n   */\n  private async createAdministrationPoller<State extends AdministrationOperationState>(\n    definition: TrainingOperationDefinition<State>,\n  ): Promise<\n    State extends DocumentModelOperationState ? DocumentModelPoller : DocumentClassifierPoller\n  > {\n    const { resumeFrom } = definition.options;\n\n    const toInit =\n      resumeFrom === undefined\n        ? (ctx: OperationContext) =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-start\",\n              definition.options,\n              async (options) => {\n                const { operationLocation } = await definition.start(ctx);\n\n                if (operationLocation === undefined) {\n                  throw new Error(\n                    \"Unable to start model creation operation: no Operation-Location received.\",\n                  );\n                }\n\n                return this._restClient.sendOperationRequest(\n                  {\n                    options: {\n                      onResponse: (rawResponse, ...args) => {\n                        return captureRetryAfter(rawResponse, ctx, options, args);\n                      },\n                      ...options,\n                      abortSignal: ctx.abortSignal,\n                    },\n                  },\n                  {\n                    path: operationLocation,\n                    httpMethod: \"GET\",\n                    responses: {\n                      200: {\n                        bodyMapper: Mappers.OperationDetails,\n                      },\n                      default: {\n                        bodyMapper: Mappers.ErrorResponse,\n                      },\n                    },\n                    headerParameters: [accept1],\n                    serializer: SERIALIZER,\n                  },\n                ) as Promise<OperationDetails>;\n              },\n            )\n        : (ctx: OperationContext) =>\n            this._tracing.withSpan(\n              \"DocumentModelAdministrationClient.createDocumentModelPoller-resume\",\n              definition.options,\n              (options) => {\n                const { operationId } = JSON.parse(resumeFrom) as { operationId: string };\n\n                return this._restClient.miscellaneous.getOperation(operationId, {\n                  onResponse: (rawResponse, ...args) => {\n                    return captureRetryAfter(rawResponse, ctx, options, args);\n                  },\n                  ...options,\n                });\n              },\n            );\n\n    const poller = await lro<\n      DocumentModelDetails | DocumentClassifierDetails,\n      AdministrationOperationState\n    >(\n      {\n        init: async (ctx) => toTrainingPollOperationState(await toInit(ctx)),\n        poll: async (ctx, { operationId }) =>\n          this._tracing.withSpan(\n            \"DocumentModelAdminstrationClient.createDocumentModelPoller-poll\",\n            definition.options,\n            async (options) => {\n              const res = await this._restClient.miscellaneous.getOperation(operationId, {\n                onResponse: (rawResponse, ...args) => {\n                  // Capture the `Retry-After` header if it was sent.\n                  return captureRetryAfter(rawResponse, ctx, options, args);\n                },\n                ...options,\n                abortSignal: ctx.abortSignal,\n              });\n\n              return toTrainingPollOperationState(res as DocumentModelBuildResponse);\n            },\n          ),\n        serialize: ({ operationId }) => JSON.stringify({ operationId }),\n      },\n      definition.options.updateIntervalInMs,\n      definition.options.abortSignal,\n    );\n\n    if (definition.options.onProgress !== undefined) {\n      poller.onProgress(definition.options.onProgress as () => unknown);\n      definition.options.onProgress(poller.getOperationState() as State);\n    }\n\n    // Need this assertion. The poller above is dynamic, and we can't infer the conditional return type of this method.\n    return poller as never;\n\n    /**\n     * An inline helper for capturing the value of the `Retry-After` header if it was sent.\n     * @param rawResponse - the raw response from the service\n     * @param ctx - the operation context\n     * @param options - the operation options\n     * @param args - the arguments passed to the response handler\n     * @returns\n     */\n    function captureRetryAfter(\n      rawResponse: FullOperationResponse,\n      ctx: OperationContext,\n      options: PollerOptions<State> & OperationOptions,\n      args: [flatResponse: unknown, error?: unknown],\n    ): void | undefined {\n      const retryAfterHeader = rawResponse.headers.get(\"retry-after\");\n      // Convert the header value to milliseconds. If the header is not a valid number, then it is an HTTP\n      // date.\n      if (retryAfterHeader) {\n        const retryAfterMs = Number(retryAfterHeader) * 1000;\n        if (!Number.isNaN(retryAfterMs)) {\n          ctx.updateDelay(retryAfterMs);\n        } else {\n          ctx.updateDelay(Date.parse(retryAfterHeader) - Date.now());\n        }\n      } else {\n        ctx.updateDelay(undefined);\n      }\n\n      // Forward the `onResponse` callback if it was provided.\n      return options.onResponse?.(rawResponse, ...args);\n    }\n  }\n\n  // #region Model Management\n\n  /**\n   * Retrieve basic information about this client's resource.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleGetResourceDetails\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const {\n   *   // Information about the custom models in the current resource\n   *   customDocumentModels: {\n   *     // The number of custom models in the current resource\n   *     count,\n   *     // The maximum number of models that the current resource can support\n   *     limit,\n   *   },\n   * } = await client.getResourceDetails();\n   * ```\n   *\n   * @param options - optional settings for the request\n   * @returns basic information about this client's resource\n   */\n  public getResourceDetails(options: GetResourceDetailsOptions = {}): Promise<ResourceDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getResourceDetails\",\n      options,\n      (finalOptions) => this._restClient.miscellaneous.getResourceInfo(finalOptions),\n    );\n  }\n\n  /**\n   * Retrieves information about a model ({@link DocumentModelDetails}) by ID.\n   *\n   * This method can retrieve information about custom as well as prebuilt models.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `getModel` method could return any model, even\n   * one that failed to create due to errors. In the new service versions, `getDocumentModel` and `listDocumentModels`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleGetModel\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * // The ID of the prebuilt business card model\n   * const prebuiltModelId = \"prebuilt-businessCard\";\n   *\n   * const {\n   *   modelId, // identical to the modelId given when calling `getDocumentModel`\n   *   description, // a textual description of the model, if provided during model creation\n   *   createdOn, // the Date (timestamp) that the model was created\n   *   // information about the document types in the model and their field schemas\n   *   docTypes: {\n   *     // the document type of the prebuilt business card model\n   *     \"prebuilt:businesscard\": {\n   *       // an optional, textual description of this document type\n   *       description: businessCardDescription,\n   *       // the schema of the fields in this document type, see the FieldSchema type\n   *       fieldSchema,\n   *       // the service's confidences in the fields (an object with field names as properties and numeric confidence\n   *       // values)\n   *       fieldConfidence,\n   *     },\n   *   },\n   * } = await client.getDocumentModel(prebuiltModelId);\n   * ```\n   *\n   * @param modelId - the unique ID of the model to query\n   * @param options - optional settings for the request\n   * @returns information about the model with the given ID\n   */\n  public getDocumentModel(\n    modelId: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: GetModelOptions = {},\n  ): Promise<DocumentModelDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.documentModels.getModel(modelId, finalOptions),\n    );\n  }\n\n  /**\n   * List summaries of models in the resource. Custom as well as prebuilt models will be included. This operation\n   * supports paging.\n   *\n   * The model summary ({@link DocumentModelSummary}) includes only the basic information about the model, and does not include\n   * information about the document types in the model (such as the field schemas and confidence values).\n   *\n   * To access the full information about the model, use {@link getDocumentModel}.\n   *\n   * ### **Breaking Change**\n   *\n   * In previous versions of the Form Recognizer REST API and SDK, the `listModels` method would return all models, even\n   * those that failed to create due to errors. In the new service versions, `listDocumentModels` and `getDocumentModel`\n   * _only produce successfully created models_ (i.e. models that are \"ready\" for use). Failed models are now retrieved\n   * through the \"operations\" APIs, see {@link getOperation} and {@link listOperations}.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```ts snippet:ReadmeSampleListModels\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * // Iterate over all models in the current resource\n   * for await (const summary of client.listDocumentModels()) {\n   *   const {\n   *     modelId, // The model's unique ID\n   *     description, // a textual description of the model, if provided during model creation\n   *   } = summary;\n   *\n   *   // You can get the full model info using `getDocumentModel`\n   *   const model = await client.getDocumentModel(modelId);\n   * }\n   *\n   * // The listDocumentModels method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listDocumentModels().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of models and can be iterated synchronously\n   *   for (const summary of page) {\n   *     const {\n   *       modelId, // The model's unique ID\n   *       description, // a textual description of the model, if provided during model creation\n   *     } = summary;\n   *\n   *     // You can get the full model info using `getDocumentModel`\n   *     const model = await client.getDocumentModel(modelId);\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the model requests\n   * @returns an async iterable of model summaries that supports paging\n   */\n  public listDocumentModels(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListModelsOptions = {},\n  ): PagedAsyncIterableIterator<DocumentModelSummary> {\n    return this._restClient.documentModels.listModels(options);\n  }\n\n  /**\n   * Deletes a model with the given ID from the client's resource, if it exists. This operation CANNOT be reverted.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleDeleteModel\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * await client.deleteDocumentModel(\"<model ID to delete>\");\n   * ```\n   *\n   * @param modelId - the unique ID of the model to delete from the resource\n   * @param options - optional settings for the request\n   */\n  public deleteDocumentModel(\n    modelId: string,\n    options: DeleteDocumentModelOptions = {},\n  ): Promise<void> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.deleteDocumentModel\",\n      options,\n      (finalOptions) => this._restClient.documentModels.deleteModel(modelId, finalOptions),\n    );\n  }\n\n  // #endregion\n\n  // #region Classifier Management\n\n  /**\n   * Retrieves information about a classifier ({@link DocumentClassifierDetails}) by ID.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleGetClassifier\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * const foundClassifier = \"<classifier ID>\";\n   *\n   * const {\n   *   classifierId, // identical to the ID given when calling `getDocumentClassifier`\n   *   description, // a textual description of the classifier, if provided during classifier creation\n   *   createdOn, // the Date (timestamp) that the classifier was created\n   *   // information about the document types in the classifier and their corresponding traning data\n   *   docTypes,\n   * } = await client.getDocumentClassifier(foundClassifier);\n   *\n   * // The `docTypes` property is a map of document type names to information about the training data\n   * // for that document type.\n   * for (const [docTypeName, classifierDocTypeDetails] of Object.entries(docTypes)) {\n   *   console.log(`- '${docTypeName}': `, classifierDocTypeDetails);\n   * }\n   * ```\n   *\n   * @param classifierId - the unique ID of the classifier to query\n   * @param options - optional settings for the request\n   * @returns information about the classifier with the given ID\n   */\n  public getDocumentClassifier(\n    classifierId: string,\n    options: OperationOptions = {},\n  ): Promise<DocumentClassifierDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getDocumentClassifier\",\n      options,\n      (finalOptions) =>\n        this._restClient.documentClassifiers.getClassifier(classifierId, finalOptions),\n    );\n  }\n\n  /**\n   * List details about classifiers in the resource. This operation supports paging.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```ts snippet:ReadmeSampleListClassifiers\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * for await (const details of client.listDocumentClassifiers()) {\n   *   const {\n   *     classifierId, // The classifier's unique ID\n   *     description, // a textual description of the classifier, if provided during creation\n   *     docTypes, // information about the document types in the classifier and their corresponding traning data\n   *   } = details;\n   * }\n   *\n   * // The listDocumentClassifiers method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listDocumentClassifiers().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of classifiers and can be iterated synchronously\n   *   for (const details of page) {\n   *     const {\n   *       classifierId, // The classifier's unique ID\n   *       description, // a textual description of the classifier, if provided during creation\n   *       docTypes, // information about the document types in the classifier and their corresponding traning data\n   *     } = details;\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the classifier requests\n   * @returns an async iterable of classifier details that supports paging\n   */\n  public listDocumentClassifiers(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: ListModelsOptions = {},\n  ): PagedAsyncIterableIterator<DocumentClassifierDetails> {\n    return this._restClient.documentClassifiers.listClassifiers(options);\n  }\n\n  /**\n   * Deletes a classifier with the given ID from the client's resource, if it exists. This operation CANNOT be reverted.\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleDeleteClassifier\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * await client.deleteDocumentClassifier(\"<classifier ID to delete>\");\n   * ```\n   *\n   * @param classifierId - the unique ID of the classifier to delete from the resource\n   * @param options - optional settings for the request\n   */\n  public deleteDocumentClassifier(\n    classifierId: string,\n    options: OperationOptions = {},\n  ): Promise<void> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.deleteDocumentClassifier\",\n      options,\n      (finalOptions) =>\n        this._restClient.documentClassifiers.deleteClassifier(classifierId, finalOptions),\n    );\n  }\n\n  // #endregion\n\n  // #region Operations\n\n  /**\n   * Retrieves information about an operation (`OperationDetails`) by its ID.\n   *\n   * Operations represent non-analysis tasks, such as building, composing, or copying a model.\n   *\n   * @param operationId - the ID of the operation to query\n   * @param options - optional settings for the request\n   * @returns information about the operation with the given ID\n   *\n   * ### Example\n   *\n   * ```ts snippet:ReadmeSampleGetOperation\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * // The ID of the operation, which should be a GUID\n   * const findOperationId = \"<operation GUID>\";\n   *\n   * const {\n   *   operationId, // identical to the operationId given when calling `getOperation`\n   *   kind, // the operation kind, one of \"documentModelBuild\", \"documentModelCompose\", or \"documentModelCopyTo\"\n   *   status, // the status of the operation, one of \"notStarted\", \"running\", \"failed\", \"succeeded\", or \"canceled\"\n   *   percentCompleted, // a number between 0 and 100 representing the progress of the operation\n   *   createdOn, // a Date object that reflects the time when the operation was started\n   *   lastUpdatedOn, // a Date object that reflects the time when the operation state was last modified\n   * } = await client.getOperation(findOperationId);\n   * ```\n   */\n  public getOperation(\n    operationId: string,\n    options: GetOperationOptions = {},\n  ): Promise<OperationDetails> {\n    return this._tracing.withSpan(\n      \"DocumentModelAdministrationClient.getOperation\",\n      options,\n      (finalOptions) => this._restClient.miscellaneous.getOperation(operationId, finalOptions),\n    );\n  }\n\n  /**\n   * List model creation operations in the resource. This will produce all operations, including operations that failed\n   * to create models successfully. This operation supports paging.\n   *\n   * ### Examples\n   *\n   * #### Async Iteration\n   *\n   * ```ts snippet:ReadmeSampleListOperations\n   * import { DefaultAzureCredential } from \"@azure/identity\";\n   * import { DocumentModelAdministrationClient } from \"@azure/ai-form-recognizer\";\n   *\n   * const credential = new DefaultAzureCredential();\n   * const client = new DocumentModelAdministrationClient(\n   *   \"https://<resource name>.cognitiveservices.azure.com\",\n   *   credential,\n   * );\n   *\n   * for await (const operation of client.listOperations()) {\n   *   const {\n   *     operationId, // the operation's GUID\n   *     status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *     percentCompleted, // the progress of the operation, from 0 to 100\n   *   } = operation;\n   * }\n   *\n   * // The listOperations method is paged, and you can iterate by page using the `byPage` method.\n   * const pages = client.listOperations().byPage();\n   *\n   * for await (const page of pages) {\n   *   // Each page is an array of operation info objects and can be iterated synchronously\n   *   for (const operation of page) {\n   *     const {\n   *       operationId, // the operation's GUID\n   *       status, // the operation status, one of \"notStarted\", \"running\", \"succeeded\", \"failed\", or \"canceled\"\n   *       percentCompleted, // the progress of the operation, from 0 to 100\n   *     } = operation;\n   *   }\n   * }\n   * ```\n   *\n   * @param options - optional settings for the operation requests\n   * @returns an async iterable of operation information objects that supports paging\n   */\n  public listOperations(\n    options: ListOperationsOptions = {},\n  ): PagedAsyncIterableIterator<OperationSummary> {\n    return this._restClient.miscellaneous.listOperations(options);\n  }\n\n  // #endregion\n}\n"]}