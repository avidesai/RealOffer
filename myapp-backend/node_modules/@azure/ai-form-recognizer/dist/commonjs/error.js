"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormRecognizerError = void 0;
/**
 * Returns the innermost error that has a message field.
 *
 * @internal
 * @param error - the error to unwrap
 * @returns - the innermost populated error
 */
function unwrap(error) {
    if (error.innererror !== undefined && error.innererror.message !== undefined) {
        return unwrap(error.innererror);
    }
    return error;
}
/**
 * A class representing an Error from the Form Recognizer Service.
 *
 * For information about the error codes the service produces, refer to the service's error documentation:
 *
 * https://aka.ms/azsdk/formrecognizer/errors
 */
class FormRecognizerError extends Error {
    /**
     * Create a FormRecognizerError from a generated ErrorModel.
     * @internal
     * @hidden
     */
    constructor(formRecognizerError) {
        var _a;
        // TODO: We used to unwrap FR errors this way, but is it still necessary
        const e = unwrap(formRecognizerError);
        super(e.message);
        this.code = e.code;
        this.details = (_a = e.details) !== null && _a !== void 0 ? _a : [];
        this.target = e.target;
    }
}
exports.FormRecognizerError = FormRecognizerError;
//# sourceMappingURL=error.js.map