{"version":3,"file":"error.js","sourceRoot":"","sources":["../../src/error.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAIlC;;;;;;GAMG;AACH,SAAS,MAAM,CAAC,KAA8B;IAC5C,IAAI,KAAK,CAAC,UAAU,KAAK,SAAS,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAE,CAAC;QAC7E,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,KAAmB,CAAC;AAC7B,CAAC;AAED;;;;;;GAMG;AACH,MAAa,mBAAoB,SAAQ,KAAK;IAkB5C;;;;OAIG;IACH,YAAY,mBAA+B;;QACzC,wEAAwE;QACxE,MAAM,CAAC,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACtC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAEjB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,MAAA,CAAC,CAAC,OAAO,mCAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IACzB,CAAC;CACF;AAhCD,kDAgCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { ErrorModel, InnerError } from \"./generated/index.js\";\n\n/**\n * Returns the innermost error that has a message field.\n *\n * @internal\n * @param error - the error to unwrap\n * @returns - the innermost populated error\n */\nfunction unwrap(error: ErrorModel | InnerError): ErrorModel {\n  if (error.innererror !== undefined && error.innererror.message !== undefined) {\n    return unwrap(error.innererror);\n  }\n\n  return error as ErrorModel;\n}\n\n/**\n * A class representing an Error from the Form Recognizer Service.\n *\n * For information about the error codes the service produces, refer to the service's error documentation:\n *\n * https://aka.ms/azsdk/formrecognizer/errors\n */\nexport class FormRecognizerError extends Error {\n  /**\n   * The error code.\n   *\n   * Example: `InternalServerError`\n   */\n  public code: string;\n\n  /**\n   * A list of detailed errors that are related to this error.\n   */\n  public details: ErrorModel[];\n\n  /**\n   * The target of the error (the component or resource that the error refers to).\n   */\n  public target?: string;\n\n  /**\n   * Create a FormRecognizerError from a generated ErrorModel.\n   * @internal\n   * @hidden\n   */\n  constructor(formRecognizerError: ErrorModel) {\n    // TODO: We used to unwrap FR errors this way, but is it still necessary\n    const e = unwrap(formRecognizerError);\n    super(e.message);\n\n    this.code = e.code;\n    this.details = e.details ?? [];\n    this.target = e.target;\n  }\n}\n"]}