"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.classifyRequest2 = exports.classifyRequest1 = exports.classifyRequest = exports.classifierId = exports.buildRequest1 = exports.operationId = exports.nextLink = exports.copyToRequest = exports.authorizeCopyRequest = exports.composeRequest = exports.buildRequest = exports.contentType3 = exports.resultId = exports.features = exports.apiVersion = exports.stringIndexType = exports.locale = exports.pages = exports.modelId = exports.endpoint = exports.accept2 = exports.analyzeRequest2 = exports.contentType2 = exports.accept1 = exports.analyzeRequest1 = exports.contentType1 = exports.accept = exports.analyzeRequest = exports.contentType = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.contentType = {
    parameterPath: "contentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "application/octet-stream",
                "application/pdf",
                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                "image/bmp",
                "image/heif",
                "image/jpeg",
                "image/png",
                "image/tiff"
            ]
        }
    }
};
exports.analyzeRequest = {
    parameterPath: ["options", "analyzeRequest"],
    mapper: {
        serializedName: "analyzeRequest",
        type: {
            name: "Stream"
        }
    }
};
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.contentType1 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "text/html",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.analyzeRequest1 = {
    parameterPath: ["options", "analyzeRequest"],
    mapper: {
        serializedName: "analyzeRequest",
        type: {
            name: "String"
        }
    }
};
exports.accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.contentType2 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.analyzeRequest2 = {
    parameterPath: ["options", "analyzeRequest"],
    mapper: mappers_js_1.AnalyzeDocumentRequest
};
exports.accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
exports.endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.modelId = {
    parameterPath: "modelId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$"),
            MaxLength: 64
        },
        serializedName: "modelId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.pages = {
    parameterPath: ["options", "pages"],
    mapper: {
        constraints: {
            Pattern: new RegExp("^(\\d+(-\\d+)?)(,\\s*(\\d+(-\\d+)?))*$")
        },
        serializedName: "pages",
        type: {
            name: "String"
        }
    }
};
exports.locale = {
    parameterPath: ["options", "locale"],
    mapper: {
        serializedName: "locale",
        type: {
            name: "String"
        }
    }
};
exports.stringIndexType = {
    parameterPath: "stringIndexType",
    mapper: {
        serializedName: "stringIndexType",
        type: {
            name: "String"
        }
    }
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-07-31",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
exports.features = {
    parameterPath: ["options", "features"],
    mapper: {
        serializedName: "features",
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "String"
                }
            }
        }
    },
    collectionFormat: "CSV"
};
exports.resultId = {
    parameterPath: "resultId",
    mapper: {
        serializedName: "resultId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
exports.contentType3 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
exports.buildRequest = {
    parameterPath: "buildRequest",
    mapper: mappers_js_1.BuildDocumentModelRequest
};
exports.composeRequest = {
    parameterPath: "composeRequest",
    mapper: mappers_js_1.ComposeDocumentModelRequest
};
exports.authorizeCopyRequest = {
    parameterPath: "authorizeCopyRequest",
    mapper: mappers_js_1.AuthorizeCopyRequest
};
exports.copyToRequest = {
    parameterPath: "copyToRequest",
    mapper: mappers_js_1.CopyAuthorization
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"),
            MaxLength: 36
        },
        serializedName: "operationId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.buildRequest1 = {
    parameterPath: "buildRequest",
    mapper: mappers_js_1.BuildDocumentClassifierRequest
};
exports.classifierId = {
    parameterPath: "classifierId",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$"),
            MaxLength: 64
        },
        serializedName: "classifierId",
        required: true,
        type: {
            name: "String"
        }
    }
};
exports.classifyRequest = {
    parameterPath: ["options", "classifyRequest"],
    mapper: {
        serializedName: "classifyRequest",
        type: {
            name: "Stream"
        }
    }
};
exports.classifyRequest1 = {
    parameterPath: ["options", "classifyRequest"],
    mapper: {
        serializedName: "classifyRequest",
        type: {
            name: "String"
        }
    }
};
exports.classifyRequest2 = {
    parameterPath: ["options", "classifyRequest"],
    mapper: mappers_js_1.ClassifyDocumentRequest
};
//# sourceMappingURL=parameters.js.map