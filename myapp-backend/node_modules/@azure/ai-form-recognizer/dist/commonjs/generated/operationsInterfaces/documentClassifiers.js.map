{"version":3,"file":"documentClassifiers.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/documentClassifiers.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  DocumentClassifierDetails,\n  DocumentClassifiersListClassifiersOptionalParams,\n  BuildDocumentClassifierRequest,\n  DocumentClassifiersBuildClassifierOptionalParams,\n  DocumentClassifiersBuildClassifierResponse,\n  DocumentClassifiersGetClassifierOptionalParams,\n  DocumentClassifiersGetClassifierResponse,\n  DocumentClassifiersDeleteClassifierOptionalParams,\n  ContentType,\n  DocumentClassifiersClassifyDocument$binaryOptionalParams,\n  DocumentClassifiersClassifyDocument$textOptionalParams,\n  DocumentClassifiersClassifyDocument$jsonOptionalParams,\n  DocumentClassifiersClassifyDocumentResponse,\n  DocumentClassifiersGetClassifyResultOptionalParams,\n  DocumentClassifiersGetClassifyResultResponse\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a DocumentClassifiers. */\nexport interface DocumentClassifiers {\n  /**\n   * List all document classifiers.\n   * @param options The options parameters.\n   */\n  listClassifiers(\n    options?: DocumentClassifiersListClassifiersOptionalParams\n  ): PagedAsyncIterableIterator<DocumentClassifierDetails>;\n  /**\n   * Builds a custom document classifier.\n   * @param buildRequest Building request parameters.\n   * @param options The options parameters.\n   */\n  buildClassifier(\n    buildRequest: BuildDocumentClassifierRequest,\n    options?: DocumentClassifiersBuildClassifierOptionalParams\n  ): Promise<DocumentClassifiersBuildClassifierResponse>;\n  /**\n   * Gets detailed document classifier information.\n   * @param classifierId Unique document classifier name.\n   * @param options The options parameters.\n   */\n  getClassifier(\n    classifierId: string,\n    options?: DocumentClassifiersGetClassifierOptionalParams\n  ): Promise<DocumentClassifiersGetClassifierResponse>;\n  /**\n   * Deletes document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param options The options parameters.\n   */\n  deleteClassifier(\n    classifierId: string,\n    options?: DocumentClassifiersDeleteClassifierOptionalParams\n  ): Promise<void>;\n  /**\n   * Classifies document with document classifier.\n   * @param args Includes all the parameters for this operation.\n   */\n  classifyDocument(\n    ...args:\n      | [\n          string,\n          ContentType,\n          DocumentClassifiersClassifyDocument$binaryOptionalParams?\n        ]\n      | [\n          string,\n          \"text/html\",\n          DocumentClassifiersClassifyDocument$textOptionalParams?\n        ]\n      | [\n          string,\n          \"application/json\",\n          DocumentClassifiersClassifyDocument$jsonOptionalParams?\n        ]\n  ): Promise<DocumentClassifiersClassifyDocumentResponse>;\n  /**\n   * Gets the result of document classifier.\n   * @param classifierId Unique document classifier name.\n   * @param resultId Analyze operation result ID.\n   * @param options The options parameters.\n   */\n  getClassifyResult(\n    classifierId: string,\n    resultId: string,\n    options?: DocumentClassifiersGetClassifyResultOptionalParams\n  ): Promise<DocumentClassifiersGetClassifyResultResponse>;\n}\n"]}