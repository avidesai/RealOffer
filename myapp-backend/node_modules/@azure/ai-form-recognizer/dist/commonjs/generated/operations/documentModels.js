"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentModelsImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/// <reference lib="esnext.asynciterable" />
/** Class containing DocumentModels operations. */
class DocumentModelsImpl {
    /**
     * Initialize a new instance of the class DocumentModels class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List all document models
     * @param options The options parameters.
     */
    listModels(options) {
        const iter = this.listModelsPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listModelsPagingPage(options);
            }
        };
    }
    listModelsPagingPage(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listModelsPagingPage_1() {
            let result = yield tslib_1.__await(this._listModels(options));
            yield yield tslib_1.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib_1.__await(this._listModelsNext(continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib_1.__await(result.value || []);
            }
        });
    }
    listModelsPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listModelsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listModelsPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Analyzes document with document model.
     * @param args Includes all the parameters for this operation.
     */
    analyzeDocument(...args) {
        let operationSpec;
        let operationArguments;
        let options;
        if (args[1] === "application/octet-stream" ||
            args[1] === "application/pdf" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.presentationml.presentation" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
            args[1] ===
                "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
            args[1] === "image/bmp" ||
            args[1] === "image/heif" ||
            args[1] === "image/jpeg" ||
            args[1] === "image/png" ||
            args[1] === "image/tiff") {
            operationSpec = analyzeDocument$binaryOperationSpec;
            operationArguments = {
                modelId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else if (args[1] === "text/html") {
            operationSpec = analyzeDocument$textOperationSpec;
            operationArguments = {
                modelId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else if (args[1] === "application/json") {
            operationSpec = analyzeDocument$jsonOperationSpec;
            operationArguments = {
                modelId: args[0],
                contentType: args[1],
                options: args[2]
            };
            options = args[2];
        }
        else {
            throw new TypeError(`"contentType" must be a valid value but instead was "${args[1]}".`);
        }
        operationArguments.options = options || {};
        return this.client.sendOperationRequest(operationArguments, operationSpec);
    }
    /**
     * Gets the result of document analysis.
     * @param modelId Unique document model name.
     * @param resultId Analyze operation result ID.
     * @param options The options parameters.
     */
    getAnalyzeResult(modelId, resultId, options) {
        return this.client.sendOperationRequest({ modelId, resultId, options }, getAnalyzeResultOperationSpec);
    }
    /**
     * Builds a custom document analysis model.
     * @param buildRequest Building request parameters.
     * @param options The options parameters.
     */
    buildModel(buildRequest, options) {
        return this.client.sendOperationRequest({ buildRequest, options }, buildModelOperationSpec);
    }
    /**
     * Creates a new document model from document types of existing document models.
     * @param composeRequest Compose request parameters.
     * @param options The options parameters.
     */
    composeModel(composeRequest, options) {
        return this.client.sendOperationRequest({ composeRequest, options }, composeModelOperationSpec);
    }
    /**
     * Generates authorization to copy a document model to this location with specified modelId and
     * optional description.
     * @param authorizeCopyRequest Authorize copy request parameters.
     * @param options The options parameters.
     */
    authorizeModelCopy(authorizeCopyRequest, options) {
        return this.client.sendOperationRequest({ authorizeCopyRequest, options }, authorizeModelCopyOperationSpec);
    }
    /**
     * Copies document model to the target resource, region, and modelId.
     * @param modelId Unique document model name.
     * @param copyToRequest Copy to request parameters.
     * @param options The options parameters.
     */
    copyModelTo(modelId, copyToRequest, options) {
        return this.client.sendOperationRequest({ modelId, copyToRequest, options }, copyModelToOperationSpec);
    }
    /**
     * List all document models
     * @param options The options parameters.
     */
    _listModels(options) {
        return this.client.sendOperationRequest({ options }, listModelsOperationSpec);
    }
    /**
     * Gets detailed document model information.
     * @param modelId Unique document model name.
     * @param options The options parameters.
     */
    getModel(modelId, options) {
        return this.client.sendOperationRequest({ modelId, options }, getModelOperationSpec);
    }
    /**
     * Deletes document model.
     * @param modelId Unique document model name.
     * @param options The options parameters.
     */
    deleteModel(modelId, options) {
        return this.client.sendOperationRequest({ modelId, options }, deleteModelOperationSpec);
    }
    /**
     * ListModelsNext
     * @param nextLink The nextLink from the previous successful call to the ListModels method.
     * @param options The options parameters.
     */
    _listModelsNext(nextLink, options) {
        return this.client.sendOperationRequest({ nextLink, options }, listModelsNextOperationSpec);
    }
}
exports.DocumentModelsImpl = DocumentModelsImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const analyzeDocument$binaryOperationSpec = {
    path: "/documentModels/{modelId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.analyzeRequest,
    queryParameters: [
        Parameters.pages,
        Parameters.locale,
        Parameters.stringIndexType,
        Parameters.apiVersion,
        Parameters.features
    ],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "binary",
    serializer
};
const analyzeDocument$textOperationSpec = {
    path: "/documentModels/{modelId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.analyzeRequest1,
    queryParameters: [
        Parameters.pages,
        Parameters.locale,
        Parameters.stringIndexType,
        Parameters.apiVersion,
        Parameters.features
    ],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.contentType1, Parameters.accept1],
    mediaType: "text",
    serializer
};
const analyzeDocument$jsonOperationSpec = {
    path: "/documentModels/{modelId}:analyze",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsAnalyzeDocumentHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.analyzeRequest2,
    queryParameters: [
        Parameters.pages,
        Parameters.locale,
        Parameters.stringIndexType,
        Parameters.apiVersion,
        Parameters.features
    ],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.contentType2, Parameters.accept2],
    mediaType: "json",
    serializer
};
const getAnalyzeResultOperationSpec = {
    path: "/documentModels/{modelId}/analyzeResults/{resultId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AnalyzeResultOperation
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],
    headerParameters: [Parameters.accept2],
    serializer
};
const buildModelOperationSpec = {
    path: "/documentModels:build",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsBuildModelHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.buildRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2, Parameters.contentType3],
    mediaType: "json",
    serializer
};
const composeModelOperationSpec = {
    path: "/documentModels:compose",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsComposeModelHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.composeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2, Parameters.contentType3],
    mediaType: "json",
    serializer
};
const authorizeModelCopyOperationSpec = {
    path: "/documentModels:authorizeCopy",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CopyAuthorization
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.authorizeCopyRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2, Parameters.contentType3],
    mediaType: "json",
    serializer
};
const copyModelToOperationSpec = {
    path: "/documentModels/{modelId}:copyTo",
    httpMethod: "POST",
    responses: {
        202: {
            headersMapper: Mappers.DocumentModelsCopyModelToHeaders
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.copyToRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.accept2, Parameters.contentType3],
    mediaType: "json",
    serializer
};
const listModelsOperationSpec = {
    path: "/documentModels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetDocumentModelsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept2],
    serializer
};
const getModelOperationSpec = {
    path: "/documentModels/{modelId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DocumentModelDetails
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.accept2],
    serializer
};
const deleteModelOperationSpec = {
    path: "/documentModels/{modelId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.modelId],
    headerParameters: [Parameters.accept2],
    serializer
};
const listModelsNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.GetDocumentModelsResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept2],
    serializer
};
//# sourceMappingURL=documentModels.js.map