"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybemap = exports.isAcronymic = exports.capitalize = exports.uncapitalize = exports.SERIALIZER = exports.Mappers = void 0;
exports.makeServiceClient = makeServiceClient;
const tslib_1 = require("tslib");
const core_auth_1 = require("@azure/core-auth");
const core_rest_pipeline_1 = require("@azure/core-rest-pipeline");
const azureKeyCredentialPolicy_js_1 = require("./azureKeyCredentialPolicy.js");
const constants_js_1 = require("./constants.js");
const index_js_1 = require("./generated/index.js");
const FormRecognizerClientOptions_js_1 = require("./options/FormRecognizerClientOptions.js");
const Mappers = tslib_1.__importStar(require("./generated/models/mappers.js"));
exports.Mappers = Mappers;
const core_client_1 = require("@azure/core-client");
// This is used for URL request processing.
exports.SERIALIZER = (0, core_client_1.createSerializer)(Mappers, false);
/**
 * Type-strong uncapitalization.
 * @internal
 */
const uncapitalize = (s) => (s.substring(0, 1).toLowerCase() + s.substring(1));
exports.uncapitalize = uncapitalize;
/**
 * Type-strong capitalization
 * @internal
 */
const capitalize = (s) => (s.substring(0, 1).toUpperCase() + s.substring(1));
exports.capitalize = capitalize;
/**
 * Tests if a string looks like it begins with an acronym, i.e. it starts with two capital letters.
 * @internal
 */
const isAcronymic = (s) => {
    return /^[A-Z][A-Z]/.test(s);
};
exports.isAcronymic = isAcronymic;
/**
 * Map an optional value through a function
 * @internal
 */
const maybemap = (value, f) => value === undefined ? undefined : f(value);
exports.maybemap = maybemap;
/**
 * Create a GeneratedClient.
 * @internal
 */
function makeServiceClient(endpoint, credential, options) {
    var _a;
    const client = new index_js_1.GeneratedClient(endpoint === null || endpoint === void 0 ? void 0 : endpoint.replace(/\/$/, ""), Object.assign(Object.assign(Object.assign({}, FormRecognizerClientOptions_js_1.DEFAULT_GENERATED_CLIENT_OPTIONS), options), { apiVersion: constants_js_1.FORM_RECOGNIZER_API_VERSION }));
    const authPolicy = (0, core_auth_1.isTokenCredential)(credential)
        ? (0, core_rest_pipeline_1.bearerTokenAuthenticationPolicy)({
            credential,
            scopes: [(_a = options.audience) !== null && _a !== void 0 ? _a : constants_js_1.DEFAULT_COGNITIVE_SCOPE].map((scope) => {
                if (scope.endsWith("/.default"))
                    return scope;
                return `${scope}/.default`;
            }),
        })
        : (0, azureKeyCredentialPolicy_js_1.createFormRecognizerAzureKeyCredentialPolicy)(credential);
    client.pipeline.addPolicy(authPolicy);
    return client;
}
//# sourceMappingURL=util.js.map