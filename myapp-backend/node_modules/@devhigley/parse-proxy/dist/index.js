"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function parse(input) {
    return stringToArray(input).map(stringToProxy);
}
function stringToArray(input) {
    if (!/[ ,\n]+/g.test(input) && input.split(/\w:\d/g).length > 2)
        throw new Error("Invalid delimiter");
    return input.split(/[ ,\n]+/g);
}
function stringToProxy(input) {
    return __assign(__assign(__assign({}, getAddress(input)), getProtocol(input)), getAuth(input));
}
function getAddress(input) {
    if (input.includes("@"))
        input = input.substring(input.lastIndexOf("@") + 1);
    else if (input.includes("://"))
        input = input.split("://")[1];
    if (!input.includes(":"))
        throw new Error("Invalid address");
    var host = input.split(":")[0];
    var port = parseInt(input.split(":")[1]);
    if (/^\w+$/.test(host))
        throw new Error("Invalid host");
    if (isNaN(port))
        throw new Error("Invalid port");
    return { host: host, port: port };
}
function getProtocol(input) {
    if (!input.includes("://"))
        return { protocol: "http" };
    var protocol = input.split("://")[0];
    if (protocol.length < 3 || protocol.length > 6)
        throw new Error("Invalid protocol");
    return { protocol: protocol };
}
function getAuth(input) {
    if (!input.includes("@"))
        return undefined;
    if (input.includes("://"))
        input = input.split("://")[1];
    input = input.substring(0, input.lastIndexOf("@"));
    if (!input.includes(":"))
        throw new Error("Invalid auth");
    var _a = input.split(":"), username = _a[0], password = _a[1];
    return { auth: { username: username, password: password } };
}
module.exports = parse;
