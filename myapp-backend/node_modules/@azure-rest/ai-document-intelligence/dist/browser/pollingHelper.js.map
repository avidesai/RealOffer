{"version":3,"file":"pollingHelper.js","sourceRoot":"","sources":["../../src/pollingHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Client, HttpResponse } from \"@azure-rest/core-client\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type {\n  RunningOperation,\n  OperationResponse,\n  OperationState,\n  PollerLike,\n} from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport type {\n  AnalyzeDocumentFromStream202Response,\n  AnalyzeDocumentFromStreamDefaultResponse,\n  AnalyzeDocumentFromStreamLogicalResponse,\n  AnalyzeBatchDocuments202Response,\n  AnalyzeBatchDocumentsDefaultResponse,\n  AnalyzeBatchDocumentsLogicalResponse,\n  BuildModel202Response,\n  BuildModelDefaultResponse,\n  BuildModelLogicalResponse,\n  ComposeModel202Response,\n  ComposeModelDefaultResponse,\n  ComposeModelLogicalResponse,\n  CopyModelTo202Response,\n  CopyModelToDefaultResponse,\n  CopyModelToLogicalResponse,\n  BuildClassifier202Response,\n  BuildClassifierDefaultResponse,\n  BuildClassifierLogicalResponse,\n  ClassifyDocumentFromStream202Response,\n  ClassifyDocumentFromStreamDefaultResponse,\n  ClassifyDocumentFromStreamLogicalResponse,\n  CopyClassifierTo202Response,\n  CopyClassifierToDefaultResponse,\n  CopyClassifierToLogicalResponse,\n} from \"./responses.js\";\n\n/**\n * Options for `getLongRunningPoller`.\n */\nexport interface GetLongRunningPollerOptions {\n  /**\n   * Defines how much time the poller is going to wait before making a new request to the service.\n   */\n  intervalInMs?: number;\n  /**\n   * A serialized poller which can be used to resume an existing paused Long-Running-Operation.\n   */\n  restoreFrom?: string;\n}\n\n/**\n * Helper function that builds a Poller object to help polling a long running operation.\n * @param client - Client to use for sending the request to get additional pages.\n * @param initialResponse - The initial response.\n * @param options - Options to set a resume state or custom polling interval.\n * @returns - A poller object to poll for operation state updates and eventually get the final response.\n */\nexport function getLongRunningPoller<\n  TResult extends AnalyzeBatchDocumentsLogicalResponse | AnalyzeBatchDocumentsDefaultResponse,\n>(\n  client: Client,\n  initialResponse: AnalyzeBatchDocuments202Response | AnalyzeBatchDocumentsDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends BuildModelLogicalResponse | BuildModelDefaultResponse,\n>(\n  client: Client,\n  initialResponse: BuildModel202Response | BuildModelDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends ComposeModelLogicalResponse | ComposeModelDefaultResponse,\n>(\n  client: Client,\n  initialResponse: ComposeModel202Response | ComposeModelDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends CopyModelToLogicalResponse | CopyModelToDefaultResponse,\n>(\n  client: Client,\n  initialResponse: CopyModelTo202Response | CopyModelToDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends BuildClassifierLogicalResponse | BuildClassifierDefaultResponse,\n>(\n  client: Client,\n  initialResponse: BuildClassifier202Response | BuildClassifierDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends CopyClassifierToLogicalResponse | CopyClassifierToDefaultResponse,\n>(\n  client: Client,\n  initialResponse: CopyClassifierTo202Response | CopyClassifierToDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends\n    | AnalyzeDocumentFromStreamLogicalResponse\n    | AnalyzeDocumentFromStreamDefaultResponse,\n>(\n  client: Client,\n  initialResponse: AnalyzeDocumentFromStream202Response | AnalyzeDocumentFromStreamDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<\n  TResult extends\n    | ClassifyDocumentFromStreamLogicalResponse\n    | ClassifyDocumentFromStreamDefaultResponse,\n>(\n  client: Client,\n  initialResponse:\n    | ClassifyDocumentFromStream202Response\n    | ClassifyDocumentFromStreamDefaultResponse,\n  options?: GetLongRunningPollerOptions,\n): PollerLike<OperationState<TResult>, TResult>;\nexport function getLongRunningPoller<TResult extends HttpResponse>(\n  client: Client,\n  initialResponse: TResult,\n  options: GetLongRunningPollerOptions = {},\n): PollerLike<OperationState<TResult>, TResult> {\n  const abortController = new AbortController();\n  const poller: RunningOperation<TResult> = {\n    sendInitialRequest: async () => {\n      // In the case of Rest Clients we are building the LRO poller object from a response that's the reason\n      // we are not triggering the initial request here, just extracting the information from the\n      // response we were provided.\n      return getLroResponse(initialResponse);\n    },\n    sendPollRequest: async (path: string, pollOptions?: { abortSignal?: AbortSignalLike }) => {\n      // This is the callback that is going to be called to poll the service\n      // to get the latest status. We use the client provided and the polling path\n      // which is an opaque URL provided by caller, the service sends this in one of the following headers: operation-location, azure-asyncoperation or location\n      // depending on the lro pattern that the service implements. If non is provided we default to the initial path.\n      function abortListener(): void {\n        abortController.abort();\n      }\n      const inputAbortSignal = pollOptions?.abortSignal;\n      const abortSignal = abortController.signal;\n      if (inputAbortSignal?.aborted) {\n        abortController.abort();\n      } else if (!abortSignal.aborted) {\n        inputAbortSignal?.addEventListener(\"abort\", abortListener, {\n          once: true,\n        });\n      }\n      let response;\n      try {\n        response = await client\n          .pathUnchecked(path ?? initialResponse.request.url)\n          .get({ abortSignal });\n      } finally {\n        inputAbortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n      const lroResponse = getLroResponse(response as TResult);\n      lroResponse.rawResponse.headers[\"x-ms-original-url\"] = initialResponse.request.url;\n      return lroResponse;\n    },\n  };\n\n  return createHttpPoller(poller, options);\n}\n\n/**\n * Returns the operation-id from the operation-location header\n */\nfunction parseResultId(operationLocationHeader: string): string {\n  // regex to extract the operation id from the operation-location header with the regex \"[^:]+://[^/]+/documentintelligence/.+/([^?/]+)\"\n  const regex = /[^:]+:\\/\\/[^/]+\\/documentintelligence\\/.+\\/([^?/]+)/;\n  const match = operationLocationHeader.match(regex);\n  if (!match) {\n    throw new Error(\n      `Failed to parse result id from the operation-location header: ${operationLocationHeader}`,\n    );\n  }\n  return match[1];\n}\n\n/**\n * Returns the operation-id from the initialResponse header\n */\nexport function parseResultIdFromResponse(initialResponse: {\n  headers: { \"operation-location\": string };\n}): string {\n  const operationLocationHeader = initialResponse.headers[\"operation-location\"];\n  return parseResultId(operationLocationHeader);\n}\n\n/**\n * Converts a Rest Client response to a response that the LRO implementation understands\n * @param response - a rest client http response\n * @returns - An LRO response that the LRO implementation understands\n */\nfunction getLroResponse<TResult extends HttpResponse>(\n  response: TResult,\n): OperationResponse<TResult> {\n  if (Number.isNaN(response.status)) {\n    throw new TypeError(`Status code of the response is not a number. Value: ${response.status}`);\n  }\n\n  return {\n    flatResponse: response,\n    rawResponse: {\n      ...response,\n      statusCode: Number.parseInt(response.status),\n      body: response.body,\n    },\n  };\n}\n"]}