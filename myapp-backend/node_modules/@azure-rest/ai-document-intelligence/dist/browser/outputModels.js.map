{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../src/outputModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** Paged collection of DocumentIntelligenceOperationDetails items */\nexport interface PagedDocumentIntelligenceOperationDetailsOutput {\n  /** The DocumentIntelligenceOperationDetails items on this page */\n  value: Array<DocumentIntelligenceOperationDetailsOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/** Operation info. */\nexport interface DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation ID */\n  operationId: string;\n  /**\n   * Operation status.  notStarted, running, completed, or failed\n   *\n   * Possible values: \"notStarted\", \"running\", \"failed\", \"succeeded\", \"canceled\", \"skipped\"\n   */\n  status: DocumentIntelligenceOperationStatusOutput;\n  /** Operation progress (0-100). */\n  percentCompleted?: number;\n  /** Date and time (UTC) when the operation was created. */\n  createdDateTime: string;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedDateTime: string;\n  /** URL of the resource targeted by this operation. */\n  resourceLocation: string;\n  /** API version used to create this operation. */\n  apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: Record<string, string>;\n  /** Encountered error. */\n  error?: DocumentIntelligenceErrorOutput;\n  kind: OperationKindOutput;\n}\n\n/** The error object. */\nexport interface DocumentIntelligenceErrorOutput {\n  /** One of a server-defined set of error codes. */\n  code: string;\n  /** A human-readable representation of the error. */\n  message: string;\n  /** The target of the error. */\n  target?: string;\n  /** An array of details about specific errors that led to this reported error. */\n  details?: Array<DocumentIntelligenceErrorOutput>;\n  /** An object containing more specific information than the current object about the error. */\n  innererror?: DocumentIntelligenceInnerErrorOutput;\n}\n\n/** An object containing more specific information about the error. */\nexport interface DocumentIntelligenceInnerErrorOutput {\n  /** One of a server-defined set of error codes. */\n  code?: string;\n  /** A human-readable representation of the error. */\n  message?: string;\n  /** Inner error. */\n  innererror?: DocumentIntelligenceInnerErrorOutput;\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelBuildOperationDetailsOutput\n  extends DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation result upon success. */\n  result?: DocumentModelDetailsOutput;\n  /** Type of operation. */\n  kind: \"documentModelBuild\";\n}\n\n/** Document model info. */\nexport interface DocumentModelDetailsOutput {\n  /** Unique document model name. */\n  modelId: string;\n  /** Document model description. */\n  description?: string;\n  /** Date and time (UTC) when the document model was created. */\n  readonly createdDateTime: string;\n  /** Date and time (UTC) when the document model will expire. */\n  readonly expirationDateTime?: string;\n  /** Date and time (UTC) when the document model was last modified. */\n  readonly modifiedDateTime?: string;\n  /** API version used to create this document model. */\n  readonly apiVersion?: string;\n  /** List of key-value tag attributes associated with the document model. */\n  tags?: Record<string, string>;\n  /**\n   * Custom document model build mode.\n   *\n   * Possible values: \"template\", \"neural\"\n   */\n  readonly buildMode?: DocumentBuildModeOutput;\n  /**\n   * Azure Blob Storage location containing the training data.  Either\n   * azureBlobSource or azureBlobFileListSource must be specified.\n   */\n  readonly azureBlobSource?: AzureBlobContentSourceOutput;\n  /**\n   * Azure Blob Storage file list specifying the training data.  Either\n   * azureBlobSource or azureBlobFileListSource must be specified.\n   */\n  readonly azureBlobFileListSource?: AzureBlobFileListContentSourceOutput;\n  /** For composed models, the custom classifier to split and classify the input file. */\n  classifierId?: string;\n  /**\n   * For composed models, the file splitting behavior.\n   *\n   * Possible values: \"auto\", \"none\", \"perPage\"\n   */\n  split?: SplitModeOutput;\n  /** Supported document types. */\n  readonly docTypes?: Record<string, DocumentTypeDetailsOutput>;\n  /** List of warnings encountered while building the model. */\n  readonly warnings?: Array<DocumentIntelligenceWarningOutput>;\n  /** Number of V100-equivalent GPU hours consumed for model training. */\n  readonly trainingHours?: number;\n}\n\n/** Azure Blob Storage content. */\nexport interface AzureBlobContentSourceOutput {\n  /** Azure Blob Storage container URL. */\n  containerUrl: string;\n  /** Blob name prefix. */\n  prefix?: string;\n}\n\n/** File list in Azure Blob Storage. */\nexport interface AzureBlobFileListContentSourceOutput {\n  /** Azure Blob Storage container URL. */\n  containerUrl: string;\n  /** Path to a JSONL file within the container specifying a subset of documents. */\n  fileList: string;\n}\n\n/** Document type info. */\nexport interface DocumentTypeDetailsOutput {\n  /** Document model description. */\n  description?: string;\n  /**\n   * Custom document model build mode.\n   *\n   * Possible values: \"template\", \"neural\"\n   */\n  buildMode?: DocumentBuildModeOutput;\n  /** Description of the document semantic schema using a JSON Schema style syntax. */\n  fieldSchema?: Record<string, DocumentFieldSchemaOutput>;\n  /** Estimated confidence for each field. */\n  fieldConfidence?: Record<string, number>;\n  /** Document model to use for analyzing documents with specified type. */\n  modelId?: string;\n  /** Only perform analysis if docType confidence is above threshold. */\n  confidenceThreshold?: number;\n  /** List of optional analysis features. */\n  features?: DocumentAnalysisFeatureOutput[];\n  /** List of additional fields to extract.  Ex. \"NumberOfGuests,StoreNumber\" */\n  queryFields?: string[];\n  /** Maximum number of documents of specified type to analyze.  Default=all. */\n  maxDocumentsToAnalyze?: number;\n}\n\n/** Description of the field semantic schema using a JSON Schema style syntax. */\nexport interface DocumentFieldSchemaOutput {\n  /**\n   * Semantic data type of the field value.\n   *\n   * Possible values: \"string\", \"date\", \"time\", \"phoneNumber\", \"number\", \"integer\", \"selectionMark\", \"countryRegion\", \"signature\", \"array\", \"object\", \"currency\", \"address\", \"boolean\", \"selectionGroup\"\n   */\n  type: DocumentFieldTypeOutput;\n  /** Field description. */\n  description?: string;\n  /** Example field content. */\n  example?: string;\n  /** Field type schema of each array element. */\n  items?: DocumentFieldSchemaOutput;\n  /** Named sub-fields of the object field. */\n  properties?: Record<string, DocumentFieldSchemaOutput>;\n}\n\n/** The error object. */\nexport interface DocumentIntelligenceWarningOutput {\n  /** One of a server-defined set of warning codes. */\n  code: string;\n  /** A human-readable representation of the warning. */\n  message: string;\n  /** The target of the error. */\n  target?: string;\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelComposeOperationDetailsOutput\n  extends DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation result upon success. */\n  result?: DocumentModelDetailsOutput;\n  /** Type of operation. */\n  kind: \"documentModelCompose\";\n}\n\n/** Get Operation response object. */\nexport interface DocumentModelCopyToOperationDetailsOutput\n  extends DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation result upon success. */\n  result?: DocumentModelDetailsOutput;\n  /** Type of operation. */\n  kind: \"documentModelCopyTo\";\n}\n\n/** Get Operation response object. */\nexport interface DocumentClassifierCopyToOperationDetailsOutput\n  extends DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation result upon success. */\n  result?: DocumentClassifierDetailsOutput;\n  /** Type of operation. */\n  kind: \"documentClassifierCopyTo\";\n}\n\n/** Document classifier info. */\nexport interface DocumentClassifierDetailsOutput {\n  /** Unique document classifier name. */\n  classifierId: string;\n  /** Document classifier description. */\n  description?: string;\n  /** Date and time (UTC) when the document classifier was created. */\n  createdDateTime: string;\n  /** Date and time (UTC) when the document classifier will expire. */\n  expirationDateTime?: string;\n  /** Date and time (UTC) when the document model was last modified. */\n  readonly modifiedDateTime?: string;\n  /** API version used to create this document classifier. */\n  apiVersion: string;\n  /** Base classifierId on top of which the classifier was trained. */\n  baseClassifierId?: string;\n  /** List of document types to classify against. */\n  docTypes: Record<string, ClassifierDocumentTypeDetailsOutput>;\n  /** List of warnings encountered while building the classifier. */\n  warnings?: Array<DocumentIntelligenceWarningOutput>;\n}\n\n/** Classifier document type info. */\nexport interface ClassifierDocumentTypeDetailsOutput {\n  /**\n   * Type of training data source.\n   *\n   * Possible values: \"url\", \"base64\", \"azureBlob\", \"azureBlobFileList\"\n   */\n  sourceKind?: ContentSourceKindOutput;\n  /**\n   * Azure Blob Storage location containing the training data for a classifier\n   * document type.  Either azureBlobSource or azureBlobFileListSource must be\n   * specified.\n   */\n  azureBlobSource?: AzureBlobContentSourceOutput;\n  /**\n   * Azure Blob Storage file list specifying the training data for a classifier\n   * document type.  Either azureBlobSource or azureBlobFileListSource must be\n   * specified.\n   */\n  azureBlobFileListSource?: AzureBlobFileListContentSourceOutput;\n}\n\n/** Get Operation response object. */\nexport interface DocumentClassifierBuildOperationDetailsOutput\n  extends DocumentIntelligenceOperationDetailsOutputParent {\n  /** Operation result upon success. */\n  result?: DocumentClassifierDetailsOutput;\n  /** Type of operation. */\n  kind: \"documentClassifierBuild\";\n}\n\n/** Error response object. */\nexport interface DocumentIntelligenceErrorResponseOutput {\n  /** Error info. */\n  error: DocumentIntelligenceErrorOutput;\n}\n\n/** General information regarding the current resource. */\nexport interface DocumentIntelligenceResourceDetailsOutput {\n  /** Details regarding custom document models. */\n  customDocumentModels: CustomDocumentModelsDetailsOutput;\n}\n\n/** Details regarding custom document models. */\nexport interface CustomDocumentModelsDetailsOutput {\n  /** Number of custom document models in the current resource. */\n  count: number;\n  /** Maximum number of custom document models supported in the current resource. */\n  limit: number;\n}\n\n/** Status and result of the analyze operation. */\nexport interface AnalyzeOperationOutput {\n  /**\n   * Operation status.  notStarted, running, succeeded, or failed\n   *\n   * Possible values: \"notStarted\", \"running\", \"failed\", \"succeeded\", \"canceled\", \"skipped\"\n   */\n  status: DocumentIntelligenceOperationStatusOutput;\n  /** Date and time (UTC) when the analyze operation was submitted. */\n  createdDateTime: string;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedDateTime: string;\n  /** Encountered error during document analysis. */\n  error?: DocumentIntelligenceErrorOutput;\n  /** Document analysis result. */\n  analyzeResult?: AnalyzeResultOutput;\n}\n\n/** Document analysis result. */\nexport interface AnalyzeResultOutput {\n  /** API version used to produce this result. */\n  apiVersion: string;\n  /** Document model ID used to produce this result. */\n  modelId: string;\n  /**\n   * Method used to compute string offset and length.\n   *\n   * Possible values: \"textElements\", \"unicodeCodePoint\", \"utf16CodeUnit\"\n   */\n  stringIndexType: StringIndexTypeOutput;\n  /**\n   * Format of the analyze result top-level content.\n   *\n   * Possible values: \"text\", \"markdown\"\n   */\n  contentFormat?: DocumentContentFormatOutput;\n  /**\n   * Concatenate string representation of all textual and visual elements in reading\n   * order.\n   */\n  content: string;\n  /** Analyzed pages. */\n  pages: Array<DocumentPageOutput>;\n  /** Extracted paragraphs. */\n  paragraphs?: Array<DocumentParagraphOutput>;\n  /** Extracted tables. */\n  tables?: Array<DocumentTableOutput>;\n  /** Extracted figures. */\n  figures?: Array<DocumentFigureOutput>;\n  /** Extracted sections. */\n  sections?: Array<DocumentSectionOutput>;\n  /** Extracted key-value pairs. */\n  keyValuePairs?: Array<DocumentKeyValuePairOutput>;\n  /** Extracted font styles. */\n  styles?: Array<DocumentStyleOutput>;\n  /** Detected languages. */\n  languages?: Array<DocumentLanguageOutput>;\n  /** Extracted documents. */\n  documents?: Array<AnalyzedDocumentOutput>;\n  /** List of warnings encountered. */\n  warnings?: Array<DocumentIntelligenceWarningOutput>;\n}\n\n/** Content and layout elements extracted from a page from the input. */\nexport interface DocumentPageOutput {\n  /** 1-based page number in the input document. */\n  pageNumber: number;\n  /**\n   * The general orientation of the content in clockwise direction, measured in\n   * degrees between (-180, 180].\n   */\n  angle?: number;\n  /** The width of the image/PDF in pixels/inches, respectively. */\n  width?: number;\n  /** The height of the image/PDF in pixels/inches, respectively. */\n  height?: number;\n  /**\n   * The unit used by the width, height, and polygon properties. For images, the\n   * unit is \"pixel\". For PDF, the unit is \"inch\".\n   *\n   * Possible values: \"pixel\", \"inch\"\n   */\n  unit?: LengthUnitOutput;\n  /** Location of the page in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Extracted words from the page. */\n  words?: Array<DocumentWordOutput>;\n  /** Extracted selection marks from the page. */\n  selectionMarks?: Array<DocumentSelectionMarkOutput>;\n  /**\n   * Extracted lines from the page, potentially containing both textual and visual\n   * elements.\n   */\n  lines?: Array<DocumentLineOutput>;\n  /** Extracted barcodes from the page. */\n  barcodes?: Array<DocumentBarcodeOutput>;\n  /** Extracted formulas from the page. */\n  formulas?: Array<DocumentFormulaOutput>;\n}\n\n/**\n * Contiguous region of the concatenated content property, specified as an offset\n * and length.\n */\nexport interface DocumentSpanOutput {\n  /** Zero-based index of the content represented by the span. */\n  offset: number;\n  /** Number of characters in the content represented by the span. */\n  length: number;\n}\n\n/**\n * A word object consisting of a contiguous sequence of characters.  For non-space\n * delimited languages, such as Chinese, Japanese, and Korean, each character is\n * represented as its own word.\n */\nexport interface DocumentWordOutput {\n  /** Text content of the word. */\n  content: string;\n  /**\n   * Bounding polygon of the word, with coordinates specified relative to the\n   * top-left of the page. The numbers represent the x, y values of the polygon\n   * vertices, clockwise from the left (-180 degrees inclusive) relative to the\n   * element orientation.\n   */\n  polygon?: number[];\n  /** Location of the word in the reading order concatenated content. */\n  span: DocumentSpanOutput;\n  /** Confidence of correctly extracting the word. */\n  confidence: number;\n}\n\n/**\n * A selection mark object representing check boxes, radio buttons, and other\n * elements indicating a selection.\n */\nexport interface DocumentSelectionMarkOutput {\n  /**\n   * State of the selection mark.\n   *\n   * Possible values: \"selected\", \"unselected\"\n   */\n  state: DocumentSelectionMarkStateOutput;\n  /**\n   * Bounding polygon of the selection mark, with coordinates specified relative\n   * to the top-left of the page. The numbers represent the x, y values of the\n   * polygon vertices, clockwise from the left (-180 degrees inclusive) relative\n   * to the element orientation.\n   */\n  polygon?: number[];\n  /** Location of the selection mark in the reading order concatenated content. */\n  span: DocumentSpanOutput;\n  /** Confidence of correctly extracting the selection mark. */\n  confidence: number;\n}\n\n/**\n * A content line object consisting of an adjacent sequence of content elements,\n * such as words and selection marks.\n */\nexport interface DocumentLineOutput {\n  /** Concatenated content of the contained elements in reading order. */\n  content: string;\n  /**\n   * Bounding polygon of the line, with coordinates specified relative to the\n   * top-left of the page. The numbers represent the x, y values of the polygon\n   * vertices, clockwise from the left (-180 degrees inclusive) relative to the\n   * element orientation.\n   */\n  polygon?: number[];\n  /** Location of the line in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n}\n\n/** A barcode object. */\nexport interface DocumentBarcodeOutput {\n  /**\n   * Barcode kind.\n   *\n   * Possible values: \"QRCode\", \"PDF417\", \"UPCA\", \"UPCE\", \"Code39\", \"Code128\", \"EAN8\", \"EAN13\", \"DataBar\", \"Code93\", \"Codabar\", \"DataBarExpanded\", \"ITF\", \"MicroQRCode\", \"Aztec\", \"DataMatrix\", \"MaxiCode\"\n   */\n  kind: DocumentBarcodeKindOutput;\n  /** Barcode value. */\n  value: string;\n  /**\n   * Bounding polygon of the barcode, with coordinates specified relative to the\n   * top-left of the page. The numbers represent the x, y values of the polygon\n   * vertices, clockwise from the left (-180 degrees inclusive) relative to the\n   * element orientation.\n   */\n  polygon?: number[];\n  /** Location of the barcode in the reading order concatenated content. */\n  span: DocumentSpanOutput;\n  /** Confidence of correctly extracting the barcode. */\n  confidence: number;\n}\n\n/** A formula object. */\nexport interface DocumentFormulaOutput {\n  /**\n   * Formula kind.\n   *\n   * Possible values: \"inline\", \"display\"\n   */\n  kind: DocumentFormulaKindOutput;\n  /** LaTex expression describing the formula. */\n  value: string;\n  /**\n   * Bounding polygon of the formula, with coordinates specified relative to the\n   * top-left of the page. The numbers represent the x, y values of the polygon\n   * vertices, clockwise from the left (-180 degrees inclusive) relative to the\n   * element orientation.\n   */\n  polygon?: number[];\n  /** Location of the formula in the reading order concatenated content. */\n  span: DocumentSpanOutput;\n  /** Confidence of correctly extracting the formula. */\n  confidence: number;\n}\n\n/**\n * A paragraph object consisting with contiguous lines generally with common\n * alignment and spacing.\n */\nexport interface DocumentParagraphOutput {\n  /**\n   * Semantic role of the paragraph.\n   *\n   * Possible values: \"pageHeader\", \"pageFooter\", \"pageNumber\", \"title\", \"sectionHeading\", \"footnote\", \"formulaBlock\"\n   */\n  role?: ParagraphRoleOutput;\n  /** Concatenated content of the paragraph in reading order. */\n  content: string;\n  /** Bounding regions covering the paragraph. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the paragraph in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n}\n\n/** Bounding polygon on a specific page of the input. */\nexport interface BoundingRegionOutput {\n  /** 1-based page number of page containing the bounding region. */\n  pageNumber: number;\n  /**\n   * Bounding polygon on the page, or the entire page if not specified.\n   * Coordinates specified relative to the top-left of the page. The numbers\n   * represent the x, y values of the polygon vertices, clockwise from the left\n   * (-180 degrees inclusive) relative to the element orientation.\n   */\n  polygon: number[];\n}\n\n/** A table object consisting table cells arranged in a rectangular layout. */\nexport interface DocumentTableOutput {\n  /** Number of rows in the table. */\n  rowCount: number;\n  /** Number of columns in the table. */\n  columnCount: number;\n  /** Cells contained within the table. */\n  cells: Array<DocumentTableCellOutput>;\n  /** Bounding regions covering the table. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the table in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Caption associated with the table. */\n  caption?: DocumentCaptionOutput;\n  /** List of footnotes associated with the table. */\n  footnotes?: Array<DocumentFootnoteOutput>;\n}\n\n/** An object representing the location and content of a table cell. */\nexport interface DocumentTableCellOutput {\n  /**\n   * Table cell kind.\n   *\n   * Possible values: \"content\", \"rowHeader\", \"columnHeader\", \"stubHead\", \"description\"\n   */\n  kind?: DocumentTableCellKindOutput;\n  /** Row index of the cell. */\n  rowIndex: number;\n  /** Column index of the cell. */\n  columnIndex: number;\n  /** Number of rows spanned by this cell. */\n  rowSpan?: number;\n  /** Number of columns spanned by this cell. */\n  columnSpan?: number;\n  /** Concatenated content of the table cell in reading order. */\n  content: string;\n  /** Bounding regions covering the table cell. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the table cell in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Child elements of the table cell. */\n  elements?: string[];\n}\n\n/** A caption object describing a table or figure. */\nexport interface DocumentCaptionOutput {\n  /** Content of the caption. */\n  content: string;\n  /** Bounding regions covering the caption. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the caption in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Child elements of the caption. */\n  elements?: string[];\n}\n\n/** A footnote object describing a table or figure. */\nexport interface DocumentFootnoteOutput {\n  /** Content of the footnote. */\n  content: string;\n  /** Bounding regions covering the footnote. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the footnote in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Child elements of the footnote. */\n  elements?: string[];\n}\n\n/** An object representing a figure in the document. */\nexport interface DocumentFigureOutput {\n  /** Bounding regions covering the figure. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the figure in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Child elements of the figure, excluding any caption or footnotes. */\n  elements?: string[];\n  /** Caption associated with the figure. */\n  caption?: DocumentCaptionOutput;\n  /** List of footnotes associated with the figure. */\n  footnotes?: Array<DocumentFootnoteOutput>;\n  /** Figure ID. */\n  id?: string;\n}\n\n/** An object representing a section in the document. */\nexport interface DocumentSectionOutput {\n  /** Location of the section in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Child elements of the section. */\n  elements?: string[];\n}\n\n/**\n * An object representing a form field with distinct field label (key) and field\n * value (may be empty).\n */\nexport interface DocumentKeyValuePairOutput {\n  /** Field label of the key-value pair. */\n  key: DocumentKeyValueElementOutput;\n  /** Field value of the key-value pair. */\n  value?: DocumentKeyValueElementOutput;\n  /** Confidence of correctly extracting the key-value pair. */\n  confidence: number;\n}\n\n/** An object representing the field key or value in a key-value pair. */\nexport interface DocumentKeyValueElementOutput {\n  /** Concatenated content of the key-value element in reading order. */\n  content: string;\n  /** Bounding regions covering the key-value element. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the key-value element in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n}\n\n/** An object representing observed text styles. */\nexport interface DocumentStyleOutput {\n  /** Is content handwritten? */\n  isHandwritten?: boolean;\n  /**\n   * Visually most similar font from among the set of supported font families, with\n   * fallback fonts following CSS convention (ex. 'Arial, sans-serif').\n   */\n  similarFontFamily?: string;\n  /**\n   * Font style.\n   *\n   * Possible values: \"normal\", \"italic\"\n   */\n  fontStyle?: DocumentFontStyleOutput;\n  /**\n   * Font weight.\n   *\n   * Possible values: \"normal\", \"bold\"\n   */\n  fontWeight?: DocumentFontWeightOutput;\n  /** Foreground color in #rrggbb hexadecimal format. */\n  color?: string;\n  /** Background color in #rrggbb hexadecimal format.. */\n  backgroundColor?: string;\n  /** Location of the text elements in the concatenated content the style applies to. */\n  spans: Array<DocumentSpanOutput>;\n  /** Confidence of correctly identifying the style. */\n  confidence: number;\n}\n\n/** An object representing the detected language for a given text span. */\nexport interface DocumentLanguageOutput {\n  /**\n   * Detected language.  Value may an ISO 639-1 language code (ex. \"en\", \"fr\")\n   * or BCP 47 language tag (ex. \"zh-Hans\").\n   */\n  locale: string;\n  /**\n   * Location of the text elements in the concatenated content the language applies\n   * to.\n   */\n  spans: Array<DocumentSpanOutput>;\n  /** Confidence of correctly identifying the language. */\n  confidence: number;\n}\n\n/** An object describing the location and semantic content of a document. */\nexport interface AnalyzedDocumentOutput {\n  /** Document type. */\n  docType: string;\n  /** Bounding regions covering the document. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the document in the reading order concatenated content. */\n  spans: Array<DocumentSpanOutput>;\n  /** Dictionary of named field values. */\n  fields?: Record<string, DocumentFieldOutput>;\n  /** Confidence of correctly extracting the document. */\n  confidence: number;\n}\n\n/** An object representing the content and location of a field value. */\nexport interface DocumentFieldOutput {\n  /**\n   * Data type of the field value.\n   *\n   * Possible values: \"string\", \"date\", \"time\", \"phoneNumber\", \"number\", \"integer\", \"selectionMark\", \"countryRegion\", \"signature\", \"array\", \"object\", \"currency\", \"address\", \"boolean\", \"selectionGroup\"\n   */\n  type: DocumentFieldTypeOutput;\n  /** String value. */\n  valueString?: string;\n  /** Date value in YYYY-MM-DD format (ISO 8601). */\n  valueDate?: string;\n  /** Time value in hh:mm:ss format (ISO 8601). */\n  valueTime?: string;\n  /** Phone number value in E.164 format (ex. +19876543210). */\n  valuePhoneNumber?: string;\n  /** Floating point value. */\n  valueNumber?: number;\n  /** Integer value. */\n  valueInteger?: number;\n  /**\n   * Selection mark value.\n   *\n   * Possible values: \"selected\", \"unselected\"\n   */\n  valueSelectionMark?: DocumentSelectionMarkStateOutput;\n  /**\n   * Presence of signature.\n   *\n   * Possible values: \"signed\", \"unsigned\"\n   */\n  valueSignature?: DocumentSignatureTypeOutput;\n  /** 3-letter country code value (ISO 3166-1 alpha-3). */\n  valueCountryRegion?: string;\n  /** Array of field values. */\n  valueArray?: Array<DocumentFieldOutput>;\n  /** Dictionary of named field values. */\n  valueObject?: Record<string, DocumentFieldOutput>;\n  /** Currency value. */\n  valueCurrency?: CurrencyValueOutput;\n  /** Address value. */\n  valueAddress?: AddressValueOutput;\n  /** Boolean value. */\n  valueBoolean?: boolean;\n  /** Selection group value. */\n  valueSelectionGroup?: string[];\n  /** Field content. */\n  content?: string;\n  /** Bounding regions covering the field. */\n  boundingRegions?: Array<BoundingRegionOutput>;\n  /** Location of the field in the reading order concatenated content. */\n  spans?: Array<DocumentSpanOutput>;\n  /** Confidence of correctly extracting the field. */\n  confidence?: number;\n}\n\n/** Currency field value. */\nexport interface CurrencyValueOutput {\n  /** Currency amount. */\n  amount: number;\n  /** Currency symbol label, if any. */\n  currencySymbol?: string;\n  /** Resolved currency code (ISO 4217), if any. */\n  currencyCode?: string;\n}\n\n/** Address field value. */\nexport interface AddressValueOutput {\n  /** House or building number. */\n  houseNumber?: string;\n  /** Post office box number. */\n  poBox?: string;\n  /** Street name. */\n  road?: string;\n  /** Name of city, town, village, etc. */\n  city?: string;\n  /** First-level administrative division. */\n  state?: string;\n  /** Postal code used for mail sorting. */\n  postalCode?: string;\n  /** Country/region. */\n  countryRegion?: string;\n  /** Street-level address, excluding city, state, countryRegion, and postalCode. */\n  streetAddress?: string;\n  /** Apartment or office number */\n  unit?: string;\n  /**\n   * Districts or boroughs within a city, such as Brooklyn in New York City or City\n   * of Westminster in London.\n   */\n  cityDistrict?: string;\n  /** Second-level administrative division used in certain locales. */\n  stateDistrict?: string;\n  /** Unofficial neighborhood name, like Chinatown. */\n  suburb?: string;\n  /** Build name, such as World Trade Center. */\n  house?: string;\n  /** Floor number, such as 3F. */\n  level?: string;\n}\n\n/** Status and result of the analyze batch operation. */\nexport interface AnalyzeBatchOperationOutput {\n  /** Analyze batch operation result ID. */\n  resultId?: string;\n  /**\n   * Operation status.  notStarted, running, succeeded, or failed\n   *\n   * Possible values: \"notStarted\", \"running\", \"failed\", \"succeeded\", \"canceled\", \"skipped\"\n   */\n  status: DocumentIntelligenceOperationStatusOutput;\n  /** Date and time (UTC) when the operation was submitted. */\n  createdDateTime: string;\n  /** Date and time (UTC) when the status was last updated. */\n  lastUpdatedDateTime: string;\n  /** Operation progress (0-100). */\n  percentCompleted?: number;\n  /** Encountered error during batch document analysis. */\n  error?: DocumentIntelligenceErrorOutput;\n  /** Batch document analysis result. */\n  result?: AnalyzeBatchResultOutput;\n}\n\n/** Batch document analysis result. */\nexport interface AnalyzeBatchResultOutput {\n  /** Number of documents that completed with status succeeded. */\n  succeededCount: number;\n  /** Number of documents that completed with status failed. */\n  failedCount: number;\n  /** Number of documents that completed with status skipped. */\n  skippedCount: number;\n  /** Operation detail for each document in the batch. */\n  details?: Array<AnalyzeBatchOperationDetailOutput>;\n}\n\n/** Operation detail for a document in a batch analysis. */\nexport interface AnalyzeBatchOperationDetailOutput {\n  /**\n   * Analyze status.  succeeded, failed, or skipped\n   *\n   * Possible values: \"notStarted\", \"running\", \"failed\", \"succeeded\", \"canceled\", \"skipped\"\n   */\n  status: DocumentIntelligenceOperationStatusOutput;\n  /** URL of the source document. */\n  sourceUrl: string;\n  /** URL of the analyze result JSON. */\n  resultUrl?: string;\n  /** Encountered error. */\n  error?: DocumentIntelligenceErrorOutput;\n}\n\n/** Paged collection of AnalyzeBatchOperation items */\nexport interface PagedAnalyzeBatchOperationOutput {\n  /** The AnalyzeBatchOperation items on this page */\n  value: Array<AnalyzeBatchOperationOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/**\n * Authorization to copy a document model to the specified target resource and\n * modelId.\n */\nexport interface ModelCopyAuthorizationOutput {\n  /** ID of the target Azure resource where the document model should be copied to. */\n  targetResourceId: string;\n  /**\n   * Location of the target Azure resource where the document model should be copied\n   * to.\n   */\n  targetResourceRegion: string;\n  /** Identifier of the target document model. */\n  targetModelId: string;\n  /** URL of the copied document model in the target account. */\n  targetModelLocation: string;\n  /** Token used to authorize the request. */\n  accessToken: string;\n  /** Date/time when the access token expires. */\n  expirationDateTime: string;\n}\n\n/** Paged collection of DocumentModelDetails items */\nexport interface PagedDocumentModelDetailsOutput {\n  /** The DocumentModelDetails items on this page */\n  value: Array<DocumentModelDetailsOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/** Paged collection of DocumentClassifierDetails items */\nexport interface PagedDocumentClassifierDetailsOutput {\n  /** The DocumentClassifierDetails items on this page */\n  value: Array<DocumentClassifierDetailsOutput>;\n  /** The link to the next page of items */\n  nextLink?: string;\n}\n\n/**\n * Authorization to copy a document classifier to the specified target resource and\n * classifierId.\n */\nexport interface ClassifierCopyAuthorizationOutput {\n  /** ID of the target Azure resource where the document classifier should be copied to. */\n  targetResourceId: string;\n  /**\n   * Location of the target Azure resource where the document classifier should be copied\n   * to.\n   */\n  targetResourceRegion: string;\n  /** Identifier of the target document classifier. */\n  targetClassifierId: string;\n  /** URL of the copied document classifier in the target account. */\n  targetClassifierLocation: string;\n  /** Token used to authorize the request. */\n  accessToken: string;\n  /** Date/time when the access token expires. */\n  expirationDateTime: string;\n}\n\n/** Operation info. */\nexport type DocumentIntelligenceOperationDetailsOutput =\n  | DocumentIntelligenceOperationDetailsOutputParent\n  | DocumentModelBuildOperationDetailsOutput\n  | DocumentModelComposeOperationDetailsOutput\n  | DocumentModelCopyToOperationDetailsOutput\n  | DocumentClassifierCopyToOperationDetailsOutput\n  | DocumentClassifierBuildOperationDetailsOutput;\n/** Alias for DocumentIntelligenceOperationStatusOutput */\nexport type DocumentIntelligenceOperationStatusOutput = string;\n/** Alias for OperationKindOutput */\nexport type OperationKindOutput = string;\n/** Alias for DocumentBuildModeOutput */\nexport type DocumentBuildModeOutput = string;\n/** Alias for SplitModeOutput */\nexport type SplitModeOutput = string;\n/** Alias for DocumentFieldTypeOutput */\nexport type DocumentFieldTypeOutput = string;\n/** Alias for DocumentAnalysisFeatureOutput */\nexport type DocumentAnalysisFeatureOutput = string;\n/** Alias for ContentSourceKindOutput */\nexport type ContentSourceKindOutput = string;\n/** Alias for StringIndexTypeOutput */\nexport type StringIndexTypeOutput = string;\n/** Alias for DocumentContentFormatOutput */\nexport type DocumentContentFormatOutput = string;\n/** Alias for LengthUnitOutput */\nexport type LengthUnitOutput = string;\n/** Alias for DocumentSelectionMarkStateOutput */\nexport type DocumentSelectionMarkStateOutput = string;\n/** Alias for DocumentBarcodeKindOutput */\nexport type DocumentBarcodeKindOutput = string;\n/** Alias for DocumentFormulaKindOutput */\nexport type DocumentFormulaKindOutput = string;\n/** Alias for ParagraphRoleOutput */\nexport type ParagraphRoleOutput = string;\n/** Alias for DocumentTableCellKindOutput */\nexport type DocumentTableCellKindOutput = string;\n/** Alias for DocumentFontStyleOutput */\nexport type DocumentFontStyleOutput = string;\n/** Alias for DocumentFontWeightOutput */\nexport type DocumentFontWeightOutput = string;\n/** Alias for DocumentSignatureTypeOutput */\nexport type DocumentSignatureTypeOutput = string;\n"]}